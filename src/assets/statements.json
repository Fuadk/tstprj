{
	"GET_STMT":[
	   ":_STMT"
	],
	"dbm_cdr_def1":[
	   "select count(*), carrier, direction ",
	   " from dbm_cdr_def ",
	   " where carrier = :CARRIER  and direction = :direction",
	   " group by :groupby order by :orderby "
	],
	"dbm_cdr_def2":[
	   "select count(*) , carrier, direction ",
	   " from dbm_cdr_def ",
	   " where carrier = :CARRIER  and direction = :direction",
	   " group by :groupby order by :orderby "
	],
	"users":[
	   "select * from users "
	],
	"usersbyname":[
	   "select count(*) cnt,name from users ",
	   " where name = :NAME ",
	   " group by :groupby order by :orderby"
	],
	"GET_usersauth":[
	   "select name from users ",
	   " where name = :NAME ",
	   " and   password = :PASSWORD "
	],
	"GET_EIM_COMMANDS":[
	   "select SPC_FUNCTION,EQUIPID, EXCSYSTEM,CMDNO,TIMEOUT,CMDTXT,PARAM_FIELD,PARAMNO,PARAM_LENGTH ,CMD_LANGUAGE ",
	   " from EIM_COMMANDS ",
	   " where SPC_FUNCTION = :SPC_FUNCTION and EXCSYSTEM = :EXCSYSTEM and EQUIPID = :EQUIPID ",
	   " order by SPC_FUNCTION,EXCSYSTEM,EQUIPID, CMDNO, PARAMNO "
	],
	"GET_EIM_COMMANDS_QUERY":[
	   "select SPC_FUNCTION,EXCSYSTEM,CMDNO,TIMEOUT,CMDTXT,PARAM_FIELD,PARAMNO,PARAM_LENGTH ,EQUIPID ,CMD_LANGUAGE ",
	   " from EIM_COMMANDS ",
	   " :_WHERE ",
	   " order by SPC_FUNCTION,EXCSYSTEM,EQUIPID, CMDNO, PARAMNO "
	],
	"GET_EIM_COMMAND_RECORD":[
	   "select  AREA, SUBNO, SERORDNO, TRANSNO, EXC, EXCSYSTEM, PORTNO, SPC_FUNCTION, DEVTYPE, DEVNO, ",
	   "PARAMETER, APPDATE, NXTROUTINE, RETRANSMIT, TRANSSTATUS, EQUIPID, RETRIES, PRIORITY, ",
	   "SPC_ESC_COND, SPC_ESC_TIMESTAMP, SOTYPE, CARD_TYPE,CARDNO, STARTTIMESTAMP, ENDTIMESTAMP ",
	   " from EIM_COMMAND_RECORD ",
	   " where transno in (:transno ) "
	],
	"GET_EIM_COMMAND_RECORD_QUERY":[
	   "select  AREA, SUBNO, SERORDNO, TRANSNO, EXC, EXCSYSTEM, PORTNO, SPC_FUNCTION, DEVTYPE, DEVNO, ",
	   "PARAMETER, APPDATE, NXTROUTINE, RETRANSMIT, TRANSSTATUS, EQUIPID, RETRIES, PRIORITY, ",
	   "SPC_ESC_COND, SPC_ESC_TIMESTAMP, SOTYPE, CARD_TYPE,CARDNO, STARTTIMESTAMP, ENDTIMESTAMP ",
	   " from EIM_COMMAND_RECORD ",
	   " :_WHERE  "
	],
	"GET_EIM_EXECUTED_COMMANDS":[
	 "select TRANSNO,CMDNO,COMMAND,TIMEOUT,CMDSTATUS,ERRORCODE,TRANSDATE,ME_READING, ",
	 "LTEST_VAL1,LTEST_VAL2,LTEST_VAL3,LTEST_VAL4,LTEST_VAL5,LTEST_VAL6,LTEST_VAL7,LTEST_VAL8,LTEST_VAL9,LTEST_VAL10, ",
	 "LTEST_RESULT,CMD_LANGUAGE ",
	 "from EIM_EXECUTED_COMMANDS ",
	 "where transno in (:TRANSNO ) ",
	 " order by CMDNO "
	],
	   "insert_users":[
	 "INSERT INTO users (name, email, password)  ",
	 "VALUES (:name , :email , :password ) "
	],
	   "delete_users":[
	 "DELETE FROM users WHERE email = :email  "
	],   
	   "update_users":[
	 "UPDATE users set ",
	 "   name = :name ",
	 " , password = :password " ,
	 " where email = :email "
	],
	   "INSERT_EIM_COMMANDS":[
	 "INSERT INTO EIM_COMMANDS " ,
	 " ( SPC_FUNCTION, EXCSYSTEM, CMDNO, TIMEOUT, CMDTXT, PARAM_FIELD, PARAMNO, PARAM_LENGTH, EQUIPID, CMD_LANGUAGE ) " ,
	 "VALUES ",
	 " ( :SPC_FUNCTION , :EXCSYSTEM , :CMDNO , :TIMEOUT , :CMDTXT , :PARAM_FIELD , :PARAMNO , :PARAM_LENGTH , :EQUIPID , :CMD_LANGUAGE ) " 
	],
	   "UPDATE_EIM_COMMANDS":[
	 "UPDATE  EIM_COMMANDS " ,
	 "  set CMDTXT = :CMDTXT  " ,
	 "     , TIMEOUT = :TIMEOUT  " ,
	 "     , PARAM_FIELD = :PARAM_FIELD  " ,
	 "     , PARAMNO = :PARAMNO  " ,
	 "     , PARAM_LENGTH = :PARAM_LENGTH  " ,
	 "     , CMD_LANGUAGE = :CMD_LANGUAGE  " ,
	 " WHERE " ,
	 "     SPC_FUNCTION = :SPC_FUNCTION ",
	 " and EXCSYSTEM = :EXCSYSTEM ",
	 " and EQUIPID = :EQUIPID ",
	 " and CMDNO = :CMDNO ",
	 " and PARAMNO = :PARAMNO "
	],
	   "DELETE_EIM_COMMANDS":[
	 "DELETE from  EIM_COMMANDS " ,
	 " WHERE " ,
	 "     SPC_FUNCTION = :SPC_FUNCTION ",
	 " and EXCSYSTEM = :EXCSYSTEM ",
	 " and EQUIPID = :EQUIPID ",
	 " and CMDNO = :CMDNO ",
	 " and PARAMNO = :PARAMNO "
	],
	   "UPDATE_EIM_COMMAND_RECORD":[
	 "UPDATE  EIM_COMMAND_RECORD " , 
	 " set TRANSSTATUS = :TRANSSTATUS ",
	 " WHERE " ,
	 " TRANSNO = :TRANSNO "
	],
	   "UPDATE_EIM_EXECUTED_COMMANDS":[
	 "UPDATE  EIM_EXECUTED_COMMANDS " ,
	 " set CMDSTATUS = :CMDSTATUS ",
	 "   , ERRORCODE = :ERRORCODE ",
	 " WHERE " ,
	 " TRANSNO = :TRANSNO "
 
	],
	"GET_todos":[
	   "select id, userId, title, completed from todos "
	],
	"UPDATE_todos":[
	 "UPDATE  todos " ,
	 " set completed = :completed ",
	 " WHERE " ,
	 " id = :id "
 
	],
	"DELETE_todos":[
	 "DELETE from  todos " ,
	 " WHERE " ,
	 " id = :id "
 
	],
	"GET_EPM_STEPS":[
	 "SELECT FLOW_CODE, STEP_ID, ENGINE_TYPE, ENGINE_MODULE, ENGINE_PARAM, ",
	 " PROCESSING_ORDER, ENGINE_PARAM2, IF_TRUE, IF_TRUE_PARAM, IF_FALSE, IF_FALSE_PARAM, ERROR_CODE, ",
	 " DISABLED, DESCRIPTION, PARENT_FLOW_CODE, ENGINE_LEVEL, ICON, SIM_STATUS, SIM_ICON, ENGINE_PARAM3, ",
	 " THREAD_ENABLE, ENGINE_PARAM4, ENGINE_PARAM5, CATEGORY, PARENT_STEP_ID, CHILD, ENGINE_PARAM6 ",
	 " FROM EPM_STEPS ",
	 " WHERE FLOW_CODE = :FLOW_CODE  ",
	 "   AND STEP_ID like :STEP_ID  ",
	 " order by PROCESSING_ORDER "
	],
 
	 "GET_EPM_STEPS_QUERY":[
		 " SELECT FLOW_CODE ,  STEP_ID ,  ENGINE_TYPE ,  ENGINE_MODULE ,  ENGINE_PARAM ,  PROCESSING_ORDER ,  ENGINE_PARAM2 ,  IF_TRUE ,  IF_TRUE_PARAM ,  IF_FALSE ,  IF_FALSE_PARAM ,  ERROR_CODE ,  DISABLED ,  DESCRIPTION ,  PARENT_FLOW_CODE ,  ENGINE_LEVEL ,  ICON ,  SIM_STATUS ,  SIM_ICON ,  ENGINE_PARAM3 ,  THREAD_ENABLE ,  ENGINE_PARAM4 ,  ENGINE_PARAM5 ,  CATEGORY ,  PARENT_STEP_ID ,  CHILD ,  ENGINE_PARAM6",
		 " FROM epm_steps ",
		 " :_WHERE "
	],
	"UPDATE_EPM_STEPS":[
	 "UPDATE  EPM_STEPS " ,
	 " set ENGINE_MODULE = :ENGINE_MODULE ",
	 " , DISABLED = :DISABLED ", 
	 " , DESCRIPTION = :DESCRIPTION ",
	 " , PARENT_FLOW_CODE = :PARENT_FLOW_CODE ",
	 " , ENGINE_LEVEL = :ENGINE_LEVEL ", 
	 " , ENGINE_PARAM = :ENGINE_PARAM ",
	 " , ENGINE_PARAM2 = :ENGINE_PARAM2 ",
	 " , ENGINE_PARAM3 = :ENGINE_PARAM3 ",
	 " , ENGINE_PARAM4 = :ENGINE_PARAM4 ",
	 " , ENGINE_PARAM5 = :ENGINE_PARAM5 ",
	 " , ENGINE_PARAM6 = :ENGINE_PARAM6 ",
	 " , PROCESSING_ORDER = :PROCESSING_ORDER ",
	 " , IF_TRUE = :IF_TRUE ",
	 " , IF_TRUE_PARAM = :IF_TRUE_PARAM ",
	 " , IF_FALSE = :IF_FALSE ",
	 " , IF_FALSE_PARAM = :IF_FALSE_PARAM ",
	 " , ERROR_CODE = :ERROR_CODE ",
	 " , ICON = :ICON ",
	 " , SIM_STATUS = :SIM_STATUS ",
	 " , SIM_ICON = :SIM_ICON ", 
	 " , THREAD_ENABLE = :THREAD_ENABLE ",
	 " , CATEGORY = :CATEGORY ", 
	 " , PARENT_STEP_ID = :PARENT_STEP_ID ",
	 " , CHILD = :CHILD " , 
	 " , LOGDATE = :LOGDATE ", 
	 " , LOGNAME = :LOGNAME ",
	 " WHERE FLOW_CODE = :FLOW_CODE ",
	 "   AND STEP_ID = :STEP_ID "
	],
	"UPDATE_EPM_STEPS_ORDER":[
	 "UPDATE  EPM_STEPS " ,
	 "   set PROCESSING_ORDER = PROCESSING_ORDER + 10 ",
	 " where PROCESSING_ORDER >= :PROCESSING_ORDER ",
	 " and FLOW_CODE =:FLOW_CODE "		  
	],
	"INSERT_EPM_STEPS":[
	 "INSERT INTO EPM_STEPS " ,
	 " ( FLOW_CODE,  STEP_ID ,  ENGINE_TYPE ,  ENGINE_MODULE, DISABLED, DESCRIPTION, PARENT_FLOW_CODE, ENGINE_LEVEL, ENGINE_PARAM, ENGINE_PARAM2, ENGINE_PARAM3, ENGINE_PARAM4, ENGINE_PARAM5, ENGINE_PARAM6  " ,
	 "  ,PROCESSING_ORDER, IF_TRUE, IF_TRUE_PARAM, IF_FALSE, IF_FALSE_PARAM, ERROR_CODE, ICON, SIM_STATUS, SIM_ICON, THREAD_ENABLE, CATEGORY, PARENT_STEP_ID, CHILD ,LOGNAME, LOGDATE ) ",
	 "VALUES ",
	 " ( :FLOW_CODE, " ,
	 " (select max(STEP_ID) + 1 from EPM_STEPS where FLOW_CODE = :FLOW_CODE ) , " ,
	 " :ENGINE_TYPE , :ENGINE_MODULE , :DISABLED , :DESCRIPTION , :PARENT_FLOW_CODE , :ENGINE_LEVEL , :ENGINE_PARAM , :ENGINE_PARAM2 , :ENGINE_PARAM3 , :ENGINE_PARAM4 , :ENGINE_PARAM5 , :ENGINE_PARAM6   " ,
	 "  , :PROCESSING_ORDER , :IF_TRUE , :IF_TRUE_PARAM , :IF_FALSE , :IF_FALSE_PARAM , :ERROR_CODE , :ICON , :SIM_STATUS , :SIM_ICON , :THREAD_ENABLE , :CATEGORY , :PARENT_STEP_ID , :CHILD , :LOGNAME, :LOGDATE ) " 
	],
	"GET_MAX_STEP_ID":[
	 "SELECT MAX(STEP_ID) STEP_ID ",
	 " FROM EPM_STEPS ",
	 " WHERE FLOW_CODE = :FLOW_CODE  "
	],
	"GET_MAX_PARAM2":[
	 "SELECT MAX(ENGINE_PARAM2+0)+1 ENGINE_PARAM2 ",
	 " FROM EPM_STEPS ",
	 " WHERE FLOW_CODE = :FLOW_CODE  AND ENGINE_TYPE = :ENGINE_TYPE "
	],
 
	"DELETE_EPM_STEPS":[
	 "DELETE from  EPM_STEPS " ,
	 " WHERE FLOW_CODE = :FLOW_CODE ",
	 "   AND STEP_ID = :STEP_ID "
	],
	
	"UPDATE_EPM_STEPS_PROCESSING_ORDER":[
	 "UPDATE  EPM_STEPS " ,
	 "   set PROCESSING_ORDER = :NEW_PROCESSING_ORDER ",
	 " where PROCESSING_ORDER = :PROCESSING_ORDER ",
	 " and FLOW_CODE =:FLOW_CODE "		  
	],
	"GET_LGC_DETAIL":[
	 "SELECT LGC_MODULE, LGC_TYPE, LGC_CALL_TYPE, LGC_CONDITION, LGC_ITEM, LGC_LGC_MODULE, LGC_LGC_TYPE, LGC_GROUP, LGC_GROUP_ITEM, LGC_FUNCTION, ",
	 " LGC_FIELD, LGC_PERIOD, LGC_LENGTH, LGC_OPERATION, LOG_VALUE_DISP, LGC_VALUE_TYPE, LGC_STAT_STR, LGC_VALUE, LGC_ACTION, LGC_REMARK, LGC_REASON_CODE, ",
	 " LGC_RET, LGC_PARENT, DISABLED, LOG_OPERATOR, LOG_PARENT, LOGNAME, LOGDATE, LGC_TABLE, LGC_FIELD_NAME, LGC_VFAL_FIELD " ,
	 " FROM LGC_DETAIL ",
	 " WHERE LGC_MODULE = :LGC_MODULE  AND LGC_TYPE = :LGC_TYPE  AND LGC_CALL_TYPE = :LGC_CALL_TYPE  AND LGC_CONDITION = :LGC_CONDITION "
	],
	"INSERT_LGC_DETAIL":[
	 "INSERT INTO LGC_DETAIL " ,
	 "( LGC_MODULE, LGC_TYPE, LGC_CALL_TYPE, LGC_CONDITION, LGC_ITEM, LGC_LGC_MODULE, LGC_LGC_TYPE, LGC_GROUP, LGC_GROUP_ITEM, LGC_FUNCTION, ",
	 " LGC_FIELD, LGC_PERIOD, LGC_LENGTH, LGC_OPERATION, LOG_VALUE_DISP, LGC_VALUE_TYPE, LGC_STAT_STR, LGC_VALUE, LGC_ACTION, LGC_REMARK, LGC_REASON_CODE, ",
	 " LGC_RET, LGC_PARENT, DISABLED, LOG_OPERATOR, LOG_PARENT, LOGNAME, LOGDATE, LGC_TABLE, LGC_FIELD_NAME, LGC_VFAL_FIELD ) " ,
	 " VALUES ",
	 "( :LGC_MODULE, :LGC_TYPE, :LGC_CALL_TYPE, :LGC_CONDITION, :LGC_ITEM, :LGC_LGC_MODULE, :LGC_LGC_TYPE, :LGC_GROUP, :LGC_GROUP_ITEM, :LGC_FUNCTION, ",
	 " :LGC_FIELD, :LGC_PERIOD, :LGC_LENGTH, :LGC_OPERATION, :LOG_VALUE_DISP, :LGC_VALUE_TYPE, :LGC_STAT_STR, :LGC_VALUE, :LGC_ACTION, :LGC_REMARK, :LGC_REASON_CODE, ",
	 " :LGC_RET, :LGC_PARENT, :DISABLED, :LOG_OPERATOR, :LOG_PARENT, :LOGNAME, :LOGDATE, :LGC_TABLE, :LGC_FIELD_NAME, :LGC_VFAL_FIELD ) " 
	],
	"UPDATE_LGC_DETAIL":[
	 "UPDATE LGC_DETAIL " ,
	 " SET LGC_FUNCTION = :LGC_FUNCTION ", 
	 " , LGC_FIELD = :LGC_FIELD ", 
	 " , LGC_PERIOD = :LGC_PERIOD ", 
	 " , LGC_LENGTH = :LGC_LENGTH ", 
	 " , LGC_OPERATION = :LGC_OPERATION ", 
	 " , LOG_VALUE_DISP = :LOG_VALUE_DISP ", 
	 " , LGC_VALUE_TYPE = :LGC_VALUE_TYPE ", 
	 " , LGC_STAT_STR = :LGC_STAT_STR ", 
	 " , LGC_VALUE = :LGC_VALUE ", 
	 " , LGC_ACTION = :LGC_ACTION ", 
	 " , LGC_REMARK = :LGC_REMARK ", 
	 " , LGC_REASON_CODE = :LGC_REASON_CODE ", 
	 " , LGC_RET = :LGC_RET ", 
	 " , LGC_PARENT = :LGC_PARENT ", 
	 " , DISABLED = :DISABLED ", 
	 " , LOG_OPERATOR = :LOG_OPERATOR ", 
	 " , LOG_PARENT = :LOG_PARENT ", 
	 " , LGC_TABLE = :LGC_TABLE ", 
	 " , LGC_FIELD_NAME = :LGC_FIELD_NAME ", 
	 " , LGC_VFAL_FIELD = :LGC_VFAL_FIELD ", 
	 " , LOGDATE = :LOGDATE ", 
	 " , LOGNAME = :LOGNAME ",
	 " WHERE LGC_MODULE = :LGC_MODULE  AND LGC_TYPE = :LGC_TYPE  AND LGC_CALL_TYPE = :LGC_CALL_TYPE  AND LGC_CONDITION LIKE :LGC_CONDITION AND LGC_ITEM LIKE :LGC_ITEM"
	],
	   "DELETE_LGC_DETAIL":[
	 "DELETE from  LGC_DETAIL " ,
	 " WHERE LGC_MODULE = :LGC_MODULE  AND LGC_TYPE = :LGC_TYPE  AND LGC_CALL_TYPE = :LGC_CALL_TYPE  AND LGC_CONDITION LIKE :LGC_CONDITION AND LGC_ITEM LIKE :LGC_ITEM "
	],
	 "GET_LGC_DETAIL_QUERY":[
		 " SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_CALL_TYPE ,  LGC_CONDITION ,  LGC_ITEM ,  LGC_LGC_MODULE ,  LGC_LGC_TYPE ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_FUNCTION ,  LGC_FIELD ,  LGC_PERIOD ,  LGC_LENGTH ,  LGC_OPERATION ,  LOG_VALUE_DISP ,  LGC_VALUE_TYPE ,  LGC_STAT_STR ,  LGC_VALUE ,  LGC_ACTION ,  LGC_REMARK ,  LGC_REASON_CODE ,  LGC_RET ,  LGC_PARENT ,  DISABLED ,  LOG_OPERATOR ,  LOG_PARENT ,  LOGNAME ,  LOGDATE ,  LGC_TABLE ,  LGC_FIELD_NAME ,  LGC_VFAL_FIELD ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		 " FROM LGC_DETAIL ",
		 " :_WHERE "
   ],
	  "GET_STM_CDR_DEF":[
	 "SELECT CDR_TYPE, DESCRIPTION, DATA_TYPE, DATA_SOURCE, OWNER, LOGDATE, LOGNAME, WHERE_FILTER, DELIMITER, IGNORE_FIRST_LINE, DATA_BASE_ID, CDR_SIZE, CDR_CAT, INPUT_CONTROL, ASN_HEADER, MAPPING_PARENT, FLOW_CODE, ORDER_GROUP_BY, SAMPLE_FILE, DEFAULT_FIELD_SIZE, ASN_CAT, UNMAP_METHOD, CDR_DATA_SIZE, UTF_CODE " ,
	 " FROM STM_CDR_DEF " ,
	 " WHERE CDR_TYPE = :CDR_TYPE  "
	],
	"GET_STM_CDR_DEF_QUERY":[
	 "SELECT CDR_TYPE, DESCRIPTION, DATA_TYPE, DATA_SOURCE, OWNER, LOGDATE, LOGNAME, WHERE_FILTER, DELIMITER, IGNORE_FIRST_LINE, DATA_BASE_ID, CDR_SIZE, CDR_CAT, INPUT_CONTROL, ASN_HEADER, MAPPING_PARENT, FLOW_CODE, ORDER_GROUP_BY, SAMPLE_FILE, DEFAULT_FIELD_SIZE, ASN_CAT, UNMAP_METHOD, CDR_DATA_SIZE, UTF_CODE " ,
	 " FROM STM_CDR_DEF " ,
		 " :_WHERE ",
		 " order by CDR_TYPE  "
	],
	"INSERT_STM_CDR_DEF":[
	 "INSERT INTO STM_CDR_DEF " ,
	 " ( CDR_TYPE, DESCRIPTION, DATA_TYPE, DATA_SOURCE, OWNER, LOGDATE, LOGNAME, WHERE_FILTER, DELIMITER, IGNORE_FIRST_LINE, DATA_BASE_ID,  CDR_SIZE, CDR_CAT, " ,
	 "   INPUT_CONTROL, ASN_HEADER, MAPPING_PARENT, FLOW_CODE, ORDER_GROUP_BY, SAMPLE_FILE, DEFAULT_FIELD_SIZE, ASN_CAT, UNMAP_METHOD, CDR_DATA_SIZE, UTF_CODE )" ,
	 " VALUES ",
	 " ( :CDR_TYPE, :DESCRIPTION, :DATA_TYPE, :DATA_SOURCE, :OWNER, :LOGDATE, :LOGNAME, :WHERE_FILTER, :DELIMITER, :IGNORE_FIRST_LINE, :DATA_BASE_ID, :CDR_SIZE, :CDR_CAT, " ,
	 "   :INPUT_CONTROL, :ASN_HEADER, :MAPPING_PARENT, :FLOW_CODE, :ORDER_GROUP_BY, :SAMPLE_FILE, :DEFAULT_FIELD_SIZE, :ASN_CAT, :UNMAP_METHOD, :CDR_DATA_SIZE, :UTF_CODE )" 
	],
	 "UPDATE_STM_CDR_DEF":[
		 " UPDATE  STM_CDR_DEF ",
		 " SET   CDR_TYPE = :CDR_TYPE " , 
	   ",  DESCRIPTION = :DESCRIPTION " , 
	   ",  DATA_TYPE = :DATA_TYPE " , 
	   ",  DATA_SOURCE = :DATA_SOURCE " , 
	   ",  OWNER = :OWNER " , 
	   ",  LOGDATE = :LOGDATE " , 
	   ",  LOGNAME = :LOGNAME " , 
	   ",  WHERE_FILTER = :WHERE_FILTER " , 
	   ",  DELIMITER = :DELIMITER " , 
	   ",  IGNORE_FIRST_LINE = :IGNORE_FIRST_LINE " , 
	   ",  DATA_BASE_ID = :DATA_BASE_ID " , 
	   ",  CDR_SIZE = :CDR_SIZE " , 
	   ",  CDR_CAT = :CDR_CAT " , 
	   ",  INPUT_CONTROL = :INPUT_CONTROL " , 
	   ",  ASN_HEADER = :ASN_HEADER " , 
	   ",  MAPPING_PARENT = :MAPPING_PARENT " , 
	   ",  FLOW_CODE = :FLOW_CODE " , 
	   ",  ORDER_GROUP_BY = :ORDER_GROUP_BY " , 
	   ",  SAMPLE_FILE = :SAMPLE_FILE " , 
	   ",  DEFAULT_FIELD_SIZE = :DEFAULT_FIELD_SIZE " , 
	   ",  ASN_CAT = :ASN_CAT " , 
	   ",  UNMAP_METHOD = :UNMAP_METHOD " , 
	   ",  CDR_DATA_SIZE = :CDR_DATA_SIZE " , 
	   ",  UTF_CODE = :UTF_CODE ",
		 " WHERE CDR_TYPE = :CDR_TYPE "
	],
	   "DELETE_STM_CDR_DEF":[
	 "DELETE from  STM_CDR_DEF " ,
	 " WHERE CDR_TYPE = :CDR_TYPE "
	],
	   "DELETE_STM_MODULE_DATA":[
	 "DELETE from  STM_MODULE_DATA " ,
	 " WHERE CDR_TYPE = :CDR_TYPE ",
	 "   AND DATA_ID = :DATA_ID "
	],
	"GET_ROUTINES_AUTH":[
	 "SELECT A.ROUTINE_NAME ROUTINE_NAME " ,
	 " from ADM_USER_INFORMATION U, ADM_AUTHORITY A, MENUS M ",
	 " WHERE U.USERNAME = :USERNAME ",
	 "   and U.GROUPNAME=  A.username ",
	 "   and M.MENU_TYPE = :MENU_TYPE ",
	 "   and M.CHOICE = :CHOICE ",
	 "   and A.ROUTINE_NAME  =  M.CHOICE "
	],
	"VERIFY_ADM_USER":[
	 "SELECT USERNAME , FULLNAME , SIGN , DIVS , DEPT , PHONE , GROUPNAME , LANGUAGE_NAME , IP_RESTRICT , WEB_ENABLED , WEB_BROWSER , DEFAULT_PRINTER , EXTRA_PERC , FIN_ADMIN , LOGDATE , LOGNAME , PASSWORD , TEAM , LEADER , TODAY , TOMORROW , NOTES ",
	 " from ADM_USER_INFORMATION ",
	 " WHERE USERNAME = :USERNAME ",
	 "   AND PASSWORD = :PASSWORD "
	],
	"INSERT_LGC_LOGIC_GROUP":[
	 "INSERT INTO LGC_LOGIC_GROUP " ,
	 " ( LGC_MODULE, LGC_TYPE, LGC_GROUP, LGC_GROUP_ITEM, LGC_GROUP_FUNCTION, LGC_VALUE, LGC_FIELD_FROM, LGC_FIELD_TO, DISABLED, LGC_REMARK, LGC_LEN, LOGNAME, LOGDATE, ",
	 "   LGC_FIELD, LGC_FROM_VAR2, LGC_LEN_VAR2, LGC_PARENT, LGC_VAR1, LGC_VAR2, LGC_VAR1_OFFSET, LGC_VAR2_OFFSET, LGC_FIELD_OFFSET, LGC_VAR1_OFFSET_FIELD, LGC_GROUP_ORDER ) ",
	 " VALUES ",
	 " ( :LGC_MODULE, :LGC_TYPE, :LGC_GROUP, :LGC_GROUP_ITEM, :LGC_GROUP_FUNCTION, :LGC_VALUE, :LGC_FIELD_FROM, :LGC_FIELD_TO, :DISABLED, :LGC_REMARK, :LGC_LEN, :LOGNAME, :LOGDATE, ",
	 "   :LGC_FIELD, :LGC_FROM_VAR2, :LGC_LEN_VAR2, :LGC_PARENT, :LGC_VAR1, :LGC_VAR2, :LGC_VAR1_OFFSET, :LGC_VAR2_OFFSET, :LGC_FIELD_OFFSET, :LGC_VAR1_OFFSET_FIELD, :LGC_GROUP_ORDER ) "
	],
	"UPDATE_LGC_LOGIC_GROUP":[
	 "UPDATE LGC_LOGIC_GROUP " ,
	 " SET LGC_MODULE = :LGC_MODULE ", 
	 " , LGC_TYPE = :LGC_TYPE ", 
	 " , LGC_GROUP = :LGC_GROUP ", 
	 " , LGC_GROUP_ITEM = :LGC_GROUP_ITEM ", 
	 " , LGC_GROUP_FUNCTION = :LGC_GROUP_FUNCTION ", 
	 " , LGC_VALUE = :LGC_VALUE ", 
	 " , LGC_FIELD_FROM = :LGC_FIELD_FROM ", 
	 " , LGC_FIELD_TO = :LGC_FIELD_TO ", 
	 " , DISABLED = :DISABLED ", 
	 " , LGC_REMARK = :LGC_REMARK ", 
	 " , LGC_LEN = :LGC_LEN ", 
	 " , LOGNAME = :LOGNAME ", 
	 " , LOGDATE = :LOGDATE ", 
	 " , LGC_FIELD = :LGC_FIELD ", 
	 " , LGC_FROM_VAR2 = :LGC_FROM_VAR2 ", 
	 " , LGC_LEN_VAR2 = :LGC_LEN_VAR2 ", 
	 " , LGC_PARENT = :LGC_PARENT ", 
	 " , LGC_VAR1 = :LGC_VAR1 ", 
	 " , LGC_VAR2 = :LGC_VAR2 ", 
	 " , LGC_VAR1_OFFSET = :LGC_VAR1_OFFSET ", 
	 " , LGC_VAR2_OFFSET = :LGC_VAR2_OFFSET ", 
	 " , LGC_FIELD_OFFSET = :LGC_FIELD_OFFSET ", 
	 " , LGC_VAR1_OFFSET_FIELD = :LGC_VAR1_OFFSET_FIELD ", 
	 " , LGC_GROUP_ORDER = :LGC_GROUP_ORDER ",
	 " WHERE LGC_MODULE =  :LGC_MODULE ",
	 "   AND LGC_TYPE =  :LGC_TYPE ", 
	 "   AND LGC_GROUP =  :LGC_GROUP ",
	 "   AND LGC_GROUP_ITEM =  :LGC_GROUP_ITEM "
	],
	   "DELETE_LGC_LOGIC_GROUP":[
	 "DELETE from  LGC_LOGIC_GROUP " ,
	 " WHERE LGC_MODULE =  :LGC_MODULE ",
	 "   AND LGC_TYPE =  :LGC_TYPE ", 
	 "   AND LGC_GROUP =  :LGC_GROUP ",
	 "   AND LGC_GROUP_ITEM =  :LGC_GROUP_ITEM "
	],
	   "DELETE_LGC_LOGIC_GROUP_FOR_STEP":[
	 "DELETE from  LGC_LOGIC_GROUP " ,
	 " WHERE LGC_MODULE =  :LGC_MODULE ",
	 "   AND LGC_TYPE =  :LGC_TYPE ", 
	 "   AND LGC_GROUP =   ",
	 "   (SELECT LGC_GROUP from LGC_HEAD where LGC_MODULE = :LGC_MODULE and LGC_TYPE = :LGC_TYPE and LGC_CALL_TYPE = :LGC_CALL_TYPE )  "
	],
	"GET_STM_DATA_BASE":[
	 "SELECT DATA_BASE_ID, DATA_BASE, DB_USER, DB_PASS, LOGNAME, LOGDATE, DB_VENDOR ",
	 " FROM STM_DATA_BASE ",
	 " WHERE DATA_BASE_ID =  :DATA_BASE_ID "
	],
	"INSERT_STM_DATA_BASE":[
		" INSERT INTO STM_DATA_BASE ",
		" ( DATA_BASE_ID  ,  DATA_BASE  ,  DB_USER  ,  DB_PASS  ,  LOGNAME  ,  LOGDATE  ,  DB_VENDOR  ) ",
		" VALUES ",
		" ( :DATA_BASE_ID  ,  :DATA_BASE  ,  :DB_USER  ,  :DB_PASS  ,  :LOGNAME  ,  :LOGDATE  ,  :DB_VENDOR  ) "

	],
   "GET_LGC_HEAD_LOGIC_GROUP":[
		"SELECT A.LGC_MODULE, A.LGC_TYPE, B.LGC_GROUP, B.LGC_GROUP_ITEM, B.LGC_GROUP_FUNCTION, B.LGC_VALUE, B.LGC_FIELD_FROM, B.LGC_FIELD_TO, B.DISABLED, B.LGC_REMARK,  B.LGC_LEN, B.LOGNAME, ",
		" B.LOGDATE, B.LGC_FIELD, B.LGC_FROM_VAR2, B.LGC_LEN_VAR2, B.LGC_PARENT, B.LGC_VAR1, B.LGC_VAR2, B.LGC_VAR1_OFFSET, B.LGC_VAR2_OFFSET, B.LGC_FIELD_OFFSET, B.LGC_VAR1_OFFSET_FIELD, B.LGC_GROUP_ORDER ",
		" FROM LGC_HEAD A, LGC_LOGIC_GROUP B ",
		" WHERE A.LGC_MODULE = :LGC_MODULE AND A.LGC_TYPE = :LGC_TYPE AND A.LGC_CALL_TYPE = :LGC_CALL_TYPE",
		" AND A.LGC_MODULE = B.LGC_MODULE  AND A.LGC_TYPE = B.LGC_TYPE AND A.LGC_GROUP = B.LGC_GROUP ",
		"   ORDER BY B.LGC_GROUP, B.LGC_GROUP_ITEM "
	   ],

	"GET_LGC_HEAD_DETAIL":[
		" SELECT B.LGC_MODULE ,  B.LGC_TYPE ,  B.LGC_CALL_TYPE ,  B.LGC_CONDITION ,  B.LGC_ITEM ,  B.LGC_LGC_MODULE ,  B.LGC_LGC_TYPE ,  B.LGC_GROUP ,  B.LGC_GROUP_ITEM ,  B.LGC_FUNCTION ,  B.LGC_FIELD ,  B.LGC_PERIOD ,  B.LGC_LENGTH ,  B.LGC_OPERATION ,  B.LOG_VALUE_DISP ,  B.LGC_VALUE_TYPE ,  B.LGC_STAT_STR ,  B.LGC_VALUE ,  B.LGC_ACTION ,  B.LGC_REMARK ,  B.LGC_REASON_CODE ,  B.LGC_RET ,  B.LGC_PARENT ,  B.DISABLED ,  B.LOG_OPERATOR ,  B.LOG_PARENT ,  B.LOGNAME ,  B.LOGDATE ,  B.LGC_TABLE ,  B.LGC_FIELD_NAME ,  B.LGC_VFAL_FIELD ,  B.FLEX_FLD1 ,  B.FLEX_FLD2 ,  B.FLEX_FLD3 ,  B.FLEX_FLD4 ,  B.FLEX_FLD5",
		" FROM LGC_HEAD A, LGC_DETAIL B ",
		" WHERE A.LGC_MODULE = :LGC_MODULE AND A.LGC_TYPE = :LGC_TYPE AND A.LGC_CALL_TYPE = :LGC_CALL_TYPE",
		" AND A.LGC_MODULE = B.LGC_MODULE AND A.LGC_CALL_TYPE = B.LGC_CALL_TYPE AND A.LGC_TYPE = B.LGC_TYPE AND A.LGC_CONDITION = B.LGC_CONDITION ",
		" ORDER BY B.LGC_CONDITION ,  B.LGC_ITEM "

	],
	"GET_EIM_EXECUTED_COMMANDS_QUERY":[
		" SELECT TRANSNO ,  CMDNO ,  COMMAND ,  TIMEOUT ,  CMDSTATUS ,  ERRORCODE ,  TRANSDATE ,  ME_READING ,  LTEST_VAL1 ,  LTEST_VAL2 ,  LTEST_VAL3 ,  LTEST_VAL4 ,  LTEST_VAL5 ,  LTEST_VAL6 ,  LTEST_VAL7 ,  LTEST_VAL8 ,  LTEST_VAL9 ,  LTEST_VAL10 ,  LTEST_RESULT ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  CMD_LANGUAGE",
		" FROM EIM_EXECUTED_COMMANDS ",
		" :_WHERE ",
		" order by CMDNO "
	],
	"INSERT_EIM_EXECUTED_COMMANDS":[
		" INSERT INTO EIM_EXECUTED_COMMANDS ",
		" ( TRANSNO  ,  CMDNO  ,  COMMAND  ,  TIMEOUT  ,  CMDSTATUS  ,  ERRORCODE  ,  TRANSDATE  ,  ME_READING  ,  LTEST_VAL1  ,  LTEST_VAL2  ,  LTEST_VAL3  ,  LTEST_VAL4  ,  LTEST_VAL5  ,  LTEST_VAL6  ,  LTEST_VAL7  ,  LTEST_VAL8  ,  LTEST_VAL9  ,  LTEST_VAL10  ,  LTEST_RESULT  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  CMD_LANGUAGE  ) ",
		" VALUES ",
		" ( :TRANSNO  ,  :CMDNO  ,  :COMMAND  ,  :TIMEOUT  ,  :CMDSTATUS  ,  :ERRORCODE  ,  :TRANSDATE  ,  :ME_READING  ,  :LTEST_VAL1  ,  :LTEST_VAL2  ,  :LTEST_VAL3  ,  :LTEST_VAL4  ,  :LTEST_VAL5  ,  :LTEST_VAL6  ,  :LTEST_VAL7  ,  :LTEST_VAL8  ,  :LTEST_VAL9  ,  :LTEST_VAL10  ,  :LTEST_RESULT  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :CMD_LANGUAGE  ) "

	],
	"UPDATE_EIM_EXECUTED_COMMANDS":[
		" UPDATE  EIM_EXECUTED_COMMANDS ",
		" SET   TRANSNO = :TRANSNO " , 
	  ",  CMDNO = :CMDNO " , 
	  ",  COMMAND = :COMMAND " , 
	  ",  TIMEOUT = :TIMEOUT " , 
	  ",  CMDSTATUS = :CMDSTATUS " , 
	  ",  ERRORCODE = :ERRORCODE " , 
	  ",  TRANSDATE = :TRANSDATE " , 
	  ",  ME_READING = :ME_READING " , 
	  ",  LTEST_VAL1 = :LTEST_VAL1 " , 
	  ",  LTEST_VAL2 = :LTEST_VAL2 " , 
	  ",  LTEST_VAL3 = :LTEST_VAL3 " , 
	  ",  LTEST_VAL4 = :LTEST_VAL4 " , 
	  ",  LTEST_VAL5 = :LTEST_VAL5 " , 
	  ",  LTEST_VAL6 = :LTEST_VAL6 " , 
	  ",  LTEST_VAL7 = :LTEST_VAL7 " , 
	  ",  LTEST_VAL8 = :LTEST_VAL8 " , 
	  ",  LTEST_VAL9 = :LTEST_VAL9 " , 
	  ",  LTEST_VAL10 = :LTEST_VAL10 " , 
	  ",  LTEST_RESULT = :LTEST_RESULT " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  CMD_LANGUAGE = :CMD_LANGUAGE ",
		" WHERE TRANSNO = :TRANSNO "
	],
	"DELETE_EIM_EXECUTED_COMMANDS":[
		" DELETE FROM EIM_EXECUTED_COMMANDS ",
		" WHERE TRANSNO = :TRANSNO "

	],
	"GET_ADM_GROUPINFO":[
		" SELECT GROUPNAME ,  FULLNAME ,  DEFAULT_PRINTER ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ADM_GROUPINFO ",
		" WHERE GROUPNAME = :GROUPNAME "
	],
	"GET_ADM_GROUPINFO_QUERY":[
		" SELECT GROUPNAME ,  FULLNAME ,  DEFAULT_PRINTER ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ADM_GROUPINFO ",
		" :_WHERE "
	],
	"INSERT_ADM_GROUPINFO":[
		" INSERT INTO ADM_GROUPINFO ",
		" ( GROUPNAME  ,  FULLNAME  ,  DEFAULT_PRINTER  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ) ",
		" VALUES ",
		" ( :GROUPNAME  ,  :FULLNAME  ,  :DEFAULT_PRINTER  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ) "
	],
	"UPDATE_ADM_GROUPINFO":[
		" UPDATE  ADM_GROUPINFO ",
		" SET   GROUPNAME = :GROUPNAME " , 
	  ",  FULLNAME = :FULLNAME " , 
	  ",  DEFAULT_PRINTER = :DEFAULT_PRINTER " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 ",
		" WHERE GROUPNAME = :GROUPNAME "
	],
	"DELETE_ADM_GROUPINFO":[
		" DELETE FROM ADM_GROUPINFO ",
		" WHERE GROUPNAME = :GROUPNAME "
	],
	"GET_CEP_JOIN_DETAILS":[
		" SELECT JOIN_SEQ ,  STM_CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_CONDITION ,  LOGNAME ,  LOGDATE ,  VALUE1 ,  VALUE2 ,  CDR_TYPE_1 ,  DATA_ID ,  DATA_ID2 ,  JOIN_ORDER ,  SEARCH_TYPE ,  CMP_TYPE ,  OUTPUT_TYPE ,  JOIN_DEF ,  CEP_CDR_TYPE_1 ,  DISABLED ,  CMP_TYPE_1 ,  OUTPUT_TYPE_1 ,  LEN_TYPE",
		" FROM CEP_JOIN_DETAILS ",
		" WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND JOIN_SEQ like :JOIN_SEQ ",
		" ORDER by CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_DEF, JOIN_ORDER "

	],
	"GET_CEP_JOIN_DETAILS_QUERY":[
		" SELECT JOIN_SEQ ,  STM_CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_CONDITION ,  LOGNAME ,  LOGDATE ,  VALUE1 ,  VALUE2 ,  CDR_TYPE_1 ,  DATA_ID ,  DATA_ID2 ,  JOIN_ORDER ,  SEARCH_TYPE ,  CMP_TYPE ,  OUTPUT_TYPE ,  JOIN_DEF ,  CEP_CDR_TYPE_1 ,  DISABLED ,  CMP_TYPE_1 ,  OUTPUT_TYPE_1 ,  LEN_TYPE",
		" FROM CEP_JOIN_DETAILS ",
		" :_WHERE ",
		" ORDER by CDR_TYPE_1 ,  CDR_TYPE_2 ,  JOIN_DEF, JOIN_ORDER "
	],
	"INSERT_CEP_JOIN_DETAILS":[
		" INSERT INTO CEP_JOIN_DETAILS ",
		" ( JOIN_SEQ  ,  STM_CDR_TYPE_1  ,  CDR_TYPE_2  ,  JOIN_CONDITION  ,  LOGNAME  ,  LOGDATE  ,  VALUE1  ,  VALUE2  ,  CDR_TYPE_1  ,  DATA_ID  ,  DATA_ID2  ,  JOIN_ORDER  ,  SEARCH_TYPE  ,  CMP_TYPE  ,  OUTPUT_TYPE  ,  JOIN_DEF  ,  CEP_CDR_TYPE_1  ,  DISABLED  ,  CMP_TYPE_1  ,  OUTPUT_TYPE_1  ,  LEN_TYPE  ) ",
		" VALUES ",
		" ( :JOIN_SEQ  ,  :STM_CDR_TYPE_1  ,  :CDR_TYPE_2  ,  :JOIN_CONDITION  ,  :LOGNAME  ,  :LOGDATE  ,  :VALUE1  ,  :VALUE2  ,  :CDR_TYPE_1  ,  :DATA_ID  ,  :DATA_ID2  ,  :JOIN_ORDER  ,  :SEARCH_TYPE  ,  :CMP_TYPE  ,  :OUTPUT_TYPE  ,  :JOIN_DEF  ,  :CEP_CDR_TYPE_1  ,  :DISABLED  ,  :CMP_TYPE_1  ,  :OUTPUT_TYPE_1  ,  :LEN_TYPE  ) "
	],
	"UPDATE_CEP_JOIN_DETAILS":[
		" UPDATE  CEP_JOIN_DETAILS ",
	  "   SET JOIN_CONDITION = :JOIN_CONDITION " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  VALUE1 = :VALUE1 " , 
	  ",  VALUE2 = :VALUE2 " , 
	  ",  CDR_TYPE_1 = :CDR_TYPE_1 " , 
	  ",  DATA_ID = :DATA_ID " , 
	  ",  DATA_ID2 = :DATA_ID2 " , 
	  ",  JOIN_ORDER = :JOIN_ORDER " , 
	  ",  SEARCH_TYPE = :SEARCH_TYPE " , 
	  ",  CMP_TYPE = :CMP_TYPE " , 
	  ",  OUTPUT_TYPE = :OUTPUT_TYPE " , 
	  ",  JOIN_DEF = :JOIN_DEF " , 
	  ",  CEP_CDR_TYPE_1 = :CEP_CDR_TYPE_1 " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  CMP_TYPE_1 = :CMP_TYPE_1 " , 
	  ",  OUTPUT_TYPE_1 = :OUTPUT_TYPE_1 " , 
	  ",  LEN_TYPE = :LEN_TYPE ",
	  " WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND JOIN_SEQ = :JOIN_SEQ "
	],
	"DELETE_CEP_JOIN_DETAILS":[
		" DELETE FROM CEP_JOIN_DETAILS ",
		" WHERE  CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND JOIN_SEQ LIKE :JOIN_SEQ "
	],
	"GET_CEP_JOINS_DEF":[
		" SELECT CDR_TYPE_1 ,  CDR_TYPE_2 ,  LOGNAME ,  LOGDATE ,  WHERE_FILTER ,  LOAD_TO_MEM ,  SYNC_TABLE ,  SYNC_KEY_FIELD ,  SYNC_WHERE ,  SYNC_DATE_FIELD ,  SYNC_PROFILE ,  JOIN_DEF ,  FLOW_CODE",
		" FROM CEP_JOINS_DEF ",
		" WHERE FLOW_CODE = :FLOW_CODE and CDR_TYPE_1 = :CDR_TYPE_1  AND CDR_TYPE_2 = :CDR_TYPE_2   and JOIN_DEF = :JOIN_DEF  "

	],

	"GET_MAX_JOIN_DEF":[
		" SELECT  max(JOIN_DEF+0)+ 1 JOIN_DEF",
		" FROM CEP_JOINS_DEF ",
		" WHERE FLOW_CODE = :FLOW_CODE and CDR_TYPE_1 = :CDR_TYPE_1  AND CDR_TYPE_2 = :CDR_TYPE_2 "
	],
	"GET_CEP_JOINS_DEF_QUERY":[
		" SELECT CDR_TYPE_1 ,  CDR_TYPE_2 ,  LOGNAME ,  LOGDATE ,  WHERE_FILTER ,  LOAD_TO_MEM ,  SYNC_TABLE ,  SYNC_KEY_FIELD ,  SYNC_WHERE ,  SYNC_DATE_FIELD ,  SYNC_PROFILE ,  JOIN_DEF ,  FLOW_CODE",
		" FROM CEP_JOINS_DEF ",
		" :_WHERE "
	],
	"INSERT_CEP_JOINS_DEF":[
		" INSERT INTO CEP_JOINS_DEF ",
		" ( CDR_TYPE_1  ,  CDR_TYPE_2  ,  LOGNAME  ,  LOGDATE  ,  WHERE_FILTER  ,  LOAD_TO_MEM  ,  SYNC_TABLE  ,  SYNC_KEY_FIELD  ,  SYNC_WHERE  ,  SYNC_DATE_FIELD  ,  SYNC_PROFILE  ,  JOIN_DEF  ,  FLOW_CODE  ) ",
		" VALUES ",
		" ( :CDR_TYPE_1  ,  :CDR_TYPE_2  ,  :LOGNAME  ,  :LOGDATE  ,  :WHERE_FILTER  ,  :LOAD_TO_MEM  ,  :SYNC_TABLE  ,  :SYNC_KEY_FIELD  ,  :SYNC_WHERE  ,  :SYNC_DATE_FIELD  ,  :SYNC_PROFILE  ,  :JOIN_DEF  ,  :FLOW_CODE  ) "

	],
	"UPDATE_CEP_JOINS_DEF":[
		" UPDATE  CEP_JOINS_DEF ",
		" SET   CDR_TYPE_1 = :CDR_TYPE_1 " , 
	  ",  CDR_TYPE_2 = :CDR_TYPE_2 " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  WHERE_FILTER = :WHERE_FILTER " , 
	  ",  LOAD_TO_MEM = :LOAD_TO_MEM " , 
	  ",  SYNC_TABLE = :SYNC_TABLE " , 
	  ",  SYNC_KEY_FIELD = :SYNC_KEY_FIELD " , 
	  ",  SYNC_WHERE = :SYNC_WHERE " , 
	  ",  SYNC_DATE_FIELD = :SYNC_DATE_FIELD " , 
	  ",  SYNC_PROFILE = :SYNC_PROFILE " , 
	  ",  JOIN_DEF = :JOIN_DEF " , 
	  ",  FLOW_CODE = :FLOW_CODE ",
		" WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF   "
	],
	"DELETE_CEP_JOINS_DEF":[
		" DELETE FROM CEP_JOINS_DEF ",
		" WHERE CDR_TYPE_1 = :CDR_TYPE_1 AND CDR_TYPE_2 = :CDR_TYPE_2 AND JOIN_DEF = :JOIN_DEF AND FLOW_CODE = :FLOW_CODE "

	],
	"GET_LGC_LOGIC_GROUP":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_GROUP_FUNCTION ,  LGC_VALUE ,  LGC_FIELD_FROM ,  LGC_FIELD_TO ,  DISABLED ,  LGC_REMARK ,  LGC_LEN ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_FIELD ,  LGC_FROM_VAR2 ,  LGC_LEN_VAR2 ,  LGC_PARENT ,  LGC_VAR1 ,  LGC_VAR2 ,  LGC_VAR1_OFFSET ,  LGC_VAR2_OFFSET ,  LGC_FIELD_OFFSET ,  LGC_VAR1_OFFSET_FIELD ,  LGC_GROUP_ORDER",
		" FROM LGC_LOGIC_GROUP ",
		" WHERE LGC_MODULE = :LGC_MODULE AND LGC_TYPE = :LGC_TYPE ",
		"   ORDER BY LGC_MODULE,LGC_TYPE,  LGC_GROUP,LGC_GROUP_ORDER,  LGC_GROUP_ITEM "

	],
	"GET_LGC_LOGIC_GROUP_QUERY":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_GROUP_FUNCTION ,  LGC_VALUE ,  LGC_FIELD_FROM ,  LGC_FIELD_TO ,  DISABLED ,  LGC_REMARK ,  LGC_LEN ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_FIELD ,  LGC_FROM_VAR2 ,  LGC_LEN_VAR2 ,  LGC_PARENT ,  LGC_VAR1 ,  LGC_VAR2 ,  LGC_VAR1_OFFSET ,  LGC_VAR2_OFFSET ,  LGC_FIELD_OFFSET ,  LGC_VAR1_OFFSET_FIELD ,  LGC_GROUP_ORDER",
		" FROM LGC_LOGIC_GROUP ",
		" :_WHERE ",
		"   ORDER BY LGC_MODULE,LGC_TYPE,  LGC_GROUP, LGC_GROUP_ORDER, LGC_GROUP_ITEM "

	],
	"GET_MENUS":[
		" SELECT MENU ,  MENU_TYPE ,  CHOICE ,  TEXT ,  AR_TEXT ,  LINE ,  LANGUAGE_NAME ,  EN_TEXT ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  TYPE_NAME ,  FMODE",
		" FROM MENUS ",
		" WHERE MENU = :MENU ",
		" ORDER BY MENU, LINE "
	],
	"GET_MENUS_QUERY":[
		" SELECT MENU ,  MENU_TYPE ,  CHOICE ,  TEXT ,  AR_TEXT ,  LINE ,  LANGUAGE_NAME ,  EN_TEXT ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  TYPE_NAME ,  FMODE",
		" FROM MENUS ",
		" :_WHERE ",
		" ORDER BY MENU, LINE "
	],
	"INSERT_MENUS":[
		" INSERT INTO MENUS ",
		" ( MENU  ,  MENU_TYPE  ,  CHOICE  ,  TEXT  ,  AR_TEXT  ,  LINE  ,  LANGUAGE_NAME  ,  EN_TEXT  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  TYPE_NAME  ,  FMODE  ) ",
		" VALUES ",
		" ( :MENU  ,  :MENU_TYPE  ,  :CHOICE  ,  :TEXT  ,  :AR_TEXT  ,  :LINE  ,  :LANGUAGE_NAME  ,  :EN_TEXT  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :TYPE_NAME  ,  :FMODE  ) "
	],
	"UPDATE_MENUS":[
		" UPDATE  MENUS ",
		" SET   MENU = :MENU " , 
	  ",  MENU_TYPE = :MENU_TYPE " , 
	  ",  CHOICE = :CHOICE " , 
	  ",  TEXT = :TEXT " , 
	  ",  AR_TEXT = :AR_TEXT " , 
	  ",  LINE = :LINE " , 
	  ",  LANGUAGE_NAME = :LANGUAGE_NAME " , 
	  ",  EN_TEXT = :EN_TEXT " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  TYPE_NAME = :TYPE_NAME " , 
	  ",  FMODE = :FMODE ",
		" WHERE MENU = :MENU ",
		" AND  CHOICE = :CHOICE " 
	],
	"DELETE_MENUS":[
		" DELETE FROM MENUS ",
		" WHERE MENU = :MENU ",
		" AND  CHOICE = :CHOICE " 
	],
	"GET_ROUTINES":[
		" SELECT ROUTINE_NAME ,  RTYPE ,  PROGRAM ,  CHOICE ,  ROUT_VER ,  ROUTINE_DESC ,  HELP_FILE ,  MODULE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ROUTINES ",
		" WHERE ROUTINE_NAME = :ROUTINE_NAME "
	],
	"GET_ROUTINES_QUERY":[
		" SELECT ROUTINE_NAME ,  RTYPE ,  PROGRAM ,  CHOICE ,  ROUT_VER ,  ROUTINE_DESC ,  HELP_FILE ,  MODULE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5",
		" FROM ROUTINES ",
		" :_WHERE "
	],
	"INSERT_ROUTINES":[
		" INSERT INTO ROUTINES ",
		" ( ROUTINE_NAME  ,  RTYPE  ,  PROGRAM  ,  CHOICE  ,  ROUT_VER  ,  ROUTINE_DESC  ,  HELP_FILE  ,  MODULE  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ) ",
		" VALUES ",
		" ( :ROUTINE_NAME  ,  :RTYPE  ,  :PROGRAM  ,  :CHOICE  ,  :ROUT_VER  ,  :ROUTINE_DESC  ,  :HELP_FILE  ,  :MODULE  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ) "

	],
	"UPDATE_ROUTINES":[
		" UPDATE  ROUTINES ",
		" SET   ROUTINE_NAME = :ROUTINE_NAME " , 
	  ",  RTYPE = :RTYPE " , 
	  ",  PROGRAM = :PROGRAM " , 
	  ",  CHOICE = :CHOICE " , 
	  ",  ROUT_VER = :ROUT_VER " , 
	  ",  ROUTINE_DESC = :ROUTINE_DESC " , 
	  ",  HELP_FILE = :HELP_FILE " , 
	  ",  MODULE = :MODULE " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 ",
		" WHERE CHOICE = :CHOICE "
	],
	"DELETE_ROUTINES":[
		" DELETE FROM ROUTINES ",
		" WHERE ROUTINE_NAME = :ROUTINE_NAME "

	],
	"GET_STM_MODULE_DATA":[
		" SELECT CDR_TYPE ,  DATA_ID ,  DATA_POS ,  DATA_LEN ,  DATA_NAME ,  DATA_TYPE ,  LOGNAME ,  LOGDATE ,  PROCESSING_CONTROL ,  FORMAT_MASK ,  DATA_FORMAT ,  DATA_DESC ,  DATA_CATEGORY ,  ICON_NAME ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  IF_NULL_VAL ,  LOG_FLAG ,  ISO_NAME ,  ISO_CODE ,  ISO_STRUCT ,  ISO_OUTLEN ,  ISO_VARLEN ,  DATA_LEVEL ,  OPTIONAL ,  DATA_ORDER ,  PARENT ,  CONTROL_DATA_ID ,  CONTROL_DATA_NAME ,  SAMPLE_DATA ,  PARENT_ID ,  CDR_TYPE_REF ,  DATA_ID_REF",
		" FROM STM_MODULE_DATA ",
		" WHERE CDR_TYPE = :CDR_TYPE AND DATA_ID = :DATA_ID"

	]

	,
	"GET_STM_MODULE_DATA_QUERY":[
		" SELECT CDR_TYPE ,  DATA_ID ,  DATA_POS ,  DATA_LEN ,  DATA_NAME ,  DATA_TYPE ,  LOGNAME ,  LOGDATE ,  PROCESSING_CONTROL ,  FORMAT_MASK ,  DATA_FORMAT ,  DATA_DESC ,  DATA_CATEGORY ,  ICON_NAME ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  IF_NULL_VAL ,  LOG_FLAG ,  ISO_NAME ,  ISO_CODE ,  ISO_STRUCT ,  ISO_OUTLEN ,  ISO_VARLEN ,  DATA_LEVEL ,  OPTIONAL ,  DATA_ORDER ,  PARENT ,  CONTROL_DATA_ID ,  CONTROL_DATA_NAME ,  SAMPLE_DATA ,  PARENT_ID ,  CDR_TYPE_REF ,  DATA_ID_REF",
		" FROM STM_MODULE_DATA ",
		" :_WHERE "
	]

	,
	"INSERT_STM_MODULE_DATA":[
		" INSERT INTO STM_MODULE_DATA ",
		" ( CDR_TYPE  ,  DATA_ID  ,  DATA_POS  ,  DATA_LEN  ,  DATA_NAME  ,  DATA_TYPE  ,  LOGNAME  ,  LOGDATE  ,  PROCESSING_CONTROL  ,  FORMAT_MASK  ,  DATA_FORMAT  ,  DATA_DESC  ,  DATA_CATEGORY  ,  ICON_NAME  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  IF_NULL_VAL  ,  LOG_FLAG  ,  ISO_NAME  ,  ISO_CODE  ,  ISO_STRUCT  ,  ISO_OUTLEN  ,  ISO_VARLEN  ,  DATA_LEVEL  ,  OPTIONAL  ,  DATA_ORDER  ,  PARENT  ,  CONTROL_DATA_ID  ,  CONTROL_DATA_NAME  ,  SAMPLE_DATA  ,  PARENT_ID  ,  CDR_TYPE_REF  ,  DATA_ID_REF  ) ",
		" VALUES ",
		" ( :CDR_TYPE  ,  :DATA_ID  ,  :DATA_POS  ,  :DATA_LEN  ,  :DATA_NAME  ,  :DATA_TYPE  ,  :LOGNAME  ,  :LOGDATE  ,  :PROCESSING_CONTROL  ,  :FORMAT_MASK  ,  :DATA_FORMAT  ,  :DATA_DESC  ,  :DATA_CATEGORY  ,  :ICON_NAME  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :IF_NULL_VAL  ,  :LOG_FLAG  ,  :ISO_NAME  ,  :ISO_CODE  ,  :ISO_STRUCT  ,  :ISO_OUTLEN  ,  :ISO_VARLEN  ,  :DATA_LEVEL  ,  :OPTIONAL  ,  :DATA_ORDER  ,  :PARENT  ,  :CONTROL_DATA_ID  ,  :CONTROL_DATA_NAME  ,  :SAMPLE_DATA  ,  :PARENT_ID  ,  :CDR_TYPE_REF  ,  :DATA_ID_REF  ) "

	]

	,
	"UPDATE_STM_MODULE_DATA":[
		" UPDATE  STM_MODULE_DATA ",
		" SET   CDR_TYPE = :CDR_TYPE " , 
	  ",  DATA_ID = :DATA_ID " , 
	  ",  DATA_POS = :DATA_POS " , 
	  ",  DATA_LEN = :DATA_LEN " , 
	  ",  DATA_NAME = :DATA_NAME " , 
	  ",  DATA_TYPE = :DATA_TYPE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  PROCESSING_CONTROL = :PROCESSING_CONTROL " , 
	  ",  FORMAT_MASK = :FORMAT_MASK " , 
	  ",  DATA_FORMAT = :DATA_FORMAT " , 
	  ",  DATA_DESC = :DATA_DESC " , 
	  ",  DATA_CATEGORY = :DATA_CATEGORY " , 
	  ",  ICON_NAME = :ICON_NAME " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  IF_NULL_VAL = :IF_NULL_VAL " , 
	  ",  LOG_FLAG = :LOG_FLAG " , 
	  ",  ISO_NAME = :ISO_NAME " , 
	  ",  ISO_CODE = :ISO_CODE " , 
	  ",  ISO_STRUCT = :ISO_STRUCT " , 
	  ",  ISO_OUTLEN = :ISO_OUTLEN " , 
	  ",  ISO_VARLEN = :ISO_VARLEN " , 
	  ",  DATA_LEVEL = :DATA_LEVEL " , 
	  ",  OPTIONAL = :OPTIONAL " , 
	  ",  DATA_ORDER = :DATA_ORDER " , 
	  ",  PARENT = :PARENT " , 
	  ",  CONTROL_DATA_ID = :CONTROL_DATA_ID " , 
	  ",  CONTROL_DATA_NAME = :CONTROL_DATA_NAME " , 
	  ",  SAMPLE_DATA = :SAMPLE_DATA " , 
	  ",  PARENT_ID = :PARENT_ID " , 
	  ",  CDR_TYPE_REF = :CDR_TYPE_REF " , 
	  ",  DATA_ID_REF = :DATA_ID_REF ",
		" WHERE  CDR_TYPE = :CDR_TYPE  AND  DATA_ID = :DATA_ID "

	]

	,
	"GET_LGC_HEAD":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_CALL_TYPE ,  LGC_CONDITION ,  FROM_DATE ,  TO_DATE ,  LGC_CATEGORY ,  LGC_DESCRIPTION ,  DISABLED ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_ACTION ,  LGC_REASON_CODE ,  LGC_RET ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_SAVE_LOG",
		" FROM LGC_HEAD ",
		" WHERE LGC_MODULE = :LGC_MODULE AND LGC_TYPE = :LGC_TYPE AND LGC_CALL_TYPE = :LGC_CALL_TYPE"

	],
	"GET_MAX_GROUP":[
		" SELECT max (LGC_GROUP+0)+10  LGC_GROUP ",
		" FROM LGC_HEAD ",
		" WHERE LGC_MODULE = :LGC_MODULE AND LGC_TYPE = :LGC_TYPE "
	],

	"GET_LGC_HEAD_QUERY":[
		" SELECT LGC_MODULE ,  LGC_TYPE ,  LGC_CALL_TYPE ,  LGC_CONDITION ,  FROM_DATE ,  TO_DATE ,  LGC_CATEGORY ,  LGC_DESCRIPTION ,  DISABLED ,  LOGNAME ,  LOGDATE ,  FLEX_FLD1 ,  FLEX_FLD2 ,  FLEX_FLD3 ,  FLEX_FLD4 ,  FLEX_FLD5 ,  LGC_ACTION ,  LGC_REASON_CODE ,  LGC_RET ,  LGC_GROUP ,  LGC_GROUP_ITEM ,  LGC_SAVE_LOG",
		" FROM LGC_HEAD ",
		" :_WHERE "
	]

	,
	"INSERT_LGC_HEAD":[
		" INSERT INTO LGC_HEAD ",
		" ( LGC_MODULE  ,  LGC_TYPE  ,  LGC_CALL_TYPE  ,  LGC_CONDITION  ,  FROM_DATE  ,  TO_DATE  ,  LGC_CATEGORY  ,  LGC_DESCRIPTION  ,  DISABLED  ,  LOGNAME  ,  LOGDATE  ,  FLEX_FLD1  ,  FLEX_FLD2  ,  FLEX_FLD3  ,  FLEX_FLD4  ,  FLEX_FLD5  ,  LGC_ACTION  ,  LGC_REASON_CODE  ,  LGC_RET  ,  LGC_GROUP  ,  LGC_GROUP_ITEM  ,  LGC_SAVE_LOG  ) ",
		" VALUES ",
		" ( :LGC_MODULE  ,  :LGC_TYPE  ,  :LGC_CALL_TYPE  ,  :LGC_CONDITION  ,  :FROM_DATE  ,  :TO_DATE  ,  :LGC_CATEGORY  ,  :LGC_DESCRIPTION  ,  :DISABLED  ,  :LOGNAME  ,  :LOGDATE  ,  :FLEX_FLD1  ,  :FLEX_FLD2  ,  :FLEX_FLD3  ,  :FLEX_FLD4  ,  :FLEX_FLD5  ,  :LGC_ACTION  ,  :LGC_REASON_CODE  ,  :LGC_RET  ,  :LGC_GROUP  ,  :LGC_GROUP_ITEM  ,  :LGC_SAVE_LOG  ) "

	]

	,
	"UPDATE_LGC_HEAD":[
		" UPDATE  LGC_HEAD ",
		" SET   LGC_MODULE = :LGC_MODULE " , 
	  ",  LGC_TYPE = :LGC_TYPE " , 
	  ",  LGC_CALL_TYPE = :LGC_CALL_TYPE " , 
	  ",  LGC_CONDITION = :LGC_CONDITION " , 
	  ",  FROM_DATE = :FROM_DATE " , 
	  ",  TO_DATE = :TO_DATE " , 
	  ",  LGC_CATEGORY = :LGC_CATEGORY " , 
	  ",  LGC_DESCRIPTION = :LGC_DESCRIPTION " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  FLEX_FLD1 = :FLEX_FLD1 " , 
	  ",  FLEX_FLD2 = :FLEX_FLD2 " , 
	  ",  FLEX_FLD3 = :FLEX_FLD3 " , 
	  ",  FLEX_FLD4 = :FLEX_FLD4 " , 
	  ",  FLEX_FLD5 = :FLEX_FLD5 " , 
	  ",  LGC_ACTION = :LGC_ACTION " , 
	  ",  LGC_REASON_CODE = :LGC_REASON_CODE " , 
	  ",  LGC_RET = :LGC_RET " , 
	  ",  LGC_GROUP = :LGC_GROUP " , 
	  ",  LGC_GROUP_ITEM = :LGC_GROUP_ITEM " , 
	  ",  LGC_SAVE_LOG = :LGC_SAVE_LOG ",
		" WHERE  LGC_MODULE = :LGC_MODULE  AND  LGC_TYPE = :LGC_TYPE  AND  LGC_CALL_TYPE = :LGC_CALL_TYPE AND LGC_CONDITION LIKE :LGC_CONDITION "

	]

	,
	"DELETE_LGC_HEAD":[
		" DELETE FROM LGC_HEAD ",
		" WHERE  LGC_MODULE = :LGC_MODULE  AND  LGC_TYPE = :LGC_TYPE  AND  LGC_CALL_TYPE = :LGC_CALL_TYPE AND LGC_CONDITION LIKE :LGC_CONDITION"

	],
	"GET_ADM_DUAL":[
		" SELECT VAL",
		" FROM ADM_DUAL ",
		" WHERE KEY = :KEY"
	],
	"UPDATE_ADM_DUAL":[
		" UPDATE  ADM_DUAL ",
		" SET   VAL = VAL +1  " , 
		" WHERE KEY = :KEY"
	],
	"GET_DSP_WORK_ORDERS":[
		" SELECT WO_TYPE ,  WO_ORDER_NO ,  SUBNO ,  WO_STATUS ,  DIV ,  DEPT ,  ASSIGNEE_TYPE ,  ASSIGNEE ,  PROMISED_DATE , ORDERED_DATE, COMPLETION_DATE ,  NOTES ,  PARENT_WO_ORDER_NO ,  ORDER_NO ,  ACTUAL_START_DATE , ATTACHMENTS, ACTUAL_END_DATE ,  LOGDATE ,  LOGNAME ,  TEMPLATE_NAME, TEMPLATE_ORDER",
		" FROM DSP_WORK_ORDERS ",
		" WHERE  WO_ORDER_NO = :WO_ORDER_NO"

	]
	,
	"GET_DSP_WORK_ORDERS_BY_ORDER_NO":[
		" SELECT WO_TYPE ,  WO_ORDER_NO ,  SUBNO ,  WO_STATUS ,  DIV ,  DEPT ,  ASSIGNEE_TYPE ,  ASSIGNEE ,  PROMISED_DATE , ORDERED_DATE, COMPLETION_DATE ,  NOTES ,  PARENT_WO_ORDER_NO ,  ORDER_NO ,  ACTUAL_START_DATE , ATTACHMENTS, ACTUAL_END_DATE ,  LOGDATE ,  LOGNAME ,  TEMPLATE_NAME, TEMPLATE_ORDER",
		" FROM DSP_WORK_ORDERS ",
		" WHERE  ORDER_NO = :ORDER_NO",
		" ORDER BY WO_ORDER_NO "
	]
	,

	"GET_DSP_WORK_ORDERS_QUERY":[
		" SELECT WO_TYPE ,  WO_ORDER_NO ,  SUBNO ,  WO_STATUS ,  DIV ,  DEPT ,  ASSIGNEE_TYPE ,  ASSIGNEE ,  PROMISED_DATE ,ORDERED_DATE,  COMPLETION_DATE ,  NOTES ,  PARENT_WO_ORDER_NO ,  ORDER_NO ,  ACTUAL_START_DATE , ATTACHMENTS, ACTUAL_END_DATE ,  LOGDATE ,  LOGNAME ,  TEMPLATE_NAME, TEMPLATE_ORDER",
		" FROM DSP_WORK_ORDERS ",
		" :_WHERE "
	],
	"GET_DSP_WORK_ORDERS_TO_APPROVE":[
		" SELECT min(A.TEMPLATE_ORDER) TEMPLATE_ORDER, A.ORDER_NO, A.WO_TYPE ,  A.WO_ORDER_NO ,A.WO_STATUS, A.APPROVAL_FLAG, A.ASSIGNEE_TYPE, A.ASSIGNEE, C.DEPT, A.TEMPLATE_NAME ",
		" FROM DSP_WORK_ORDERS A , DSP_ORDERS B , ADM_USER_INFORMATION C ",
		" WHERE A.TEMPLATE_NAME like :TEMPLATE_NAME " ,
		" AND C.USERNAME = B.ASSIGNEE " ,
		" AND A.WO_STATUS = :WO_STATUS ",
		" AND A.APPROVAL_FLAG like :APPROVAL_FLAG ",
		" AND  A.ORDER_NO = B.ORDER_NO ",
		" GROUP BY A.ORDER_NO  "
	   ]
	,
	"INSERT_DSP_WORK_ORDERS":[
		" INSERT INTO DSP_WORK_ORDERS ",
		" ( WO_TYPE  ,  WO_ORDER_NO  ,  SUBNO  ,  WO_STATUS  ,  DIV  ,  DEPT  ,  ASSIGNEE_TYPE  ,  ASSIGNEE  ,  PROMISED_DATE  , ORDERED_DATE, COMPLETION_DATE  ,  NOTES  ,  PARENT_WO_ORDER_NO  ,  ORDER_NO  ,  ACTUAL_START_DATE  , ATTACHMENTS, ACTUAL_END_DATE  ,  LOGDATE  ,  LOGNAME  ,  TEMPLATE_NAME , TEMPLATE_ORDER ) ",
		" VALUES ",
		" ( :WO_TYPE  ,  :WO_ORDER_NO  ,  :SUBNO  ,  :WO_STATUS  ,  :DIV  ,  :DEPT  ,  :ASSIGNEE_TYPE  ,  :ASSIGNEE  ,  :PROMISED_DATE  , :ORDERED_DATE, :COMPLETION_DATE  ,  :NOTES  ,  :PARENT_WO_ORDER_NO  ,  :ORDER_NO  ,  :ACTUAL_START_DATE  , :ATTACHMENTS,  :ACTUAL_END_DATE  ,  :LOGDATE  ,  :LOGNAME  ,  :TEMPLATE_NAME, :TEMPLATE_ORDER  ) "

	]

	,
	"UPDATE_DSP_WORK_ORDERS":[
		" UPDATE  DSP_WORK_ORDERS ",
		" SET   WO_TYPE = :WO_TYPE " , 
	  ",  SUBNO = :SUBNO " , 
	  ",  WO_STATUS = :WO_STATUS " , 
	  ",  DIV = :DIV " , 
	  ",  DEPT = :DEPT " , 
	  ",  ASSIGNEE_TYPE = :ASSIGNEE_TYPE " , 
	  ",  ASSIGNEE = :ASSIGNEE " , 
	  ",  PROMISED_DATE = :PROMISED_DATE " , 
	  ",  ORDERED_DATE = :ORDERED_DATE " , 
	  ",  COMPLETION_DATE = :COMPLETION_DATE " , 
	  ",  NOTES = :NOTES " , 
	  ",  PARENT_WO_ORDER_NO = :PARENT_WO_ORDER_NO " , 
	  ",  ORDER_NO = :ORDER_NO " , 
	  ",  ACTUAL_START_DATE = :ACTUAL_START_DATE " , 
	  ",  ACTUAL_END_DATE = :ACTUAL_END_DATE " , 
	  ",  ATTACHMENTS = :ATTACHMENTS " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  TEMPLATE_NAME = :TEMPLATE_NAME ",
  	  ",  TEMPLATE_ORDER = :TEMPLATE_ORDER ",
		" WHERE   WO_ORDER_NO = :WO_ORDER_NO "
	],
	"UPDATE_DSP_WORK_ORDERS_PARENT":[
		" UPDATE  DSP_WORK_ORDERS ",
		" SET   WO_STATUS = :WO_STATUS " , 
		" WHERE   PARENT_WO_ORDER_NO = :PARENT_WO_ORDER_NO "
	]
	,

	"UPDATE_DSP_WORK_ORDERS_DISPATCH":[
		" UPDATE  DSP_WORK_ORDERS ",
		" SET   WO_STATUS = :WO_STATUS " , 
		" WHERE   WO_ORDER_NO = :WO_ORDER_NO "
	]
	,
	"DELETE_DSP_WORK_ORDERS":[
		" DELETE FROM DSP_WORK_ORDERS ",
		" WHERE   WO_ORDER_NO = :WO_ORDER_NO "

	]
	,
	"GET_MENU_ROUTINES":[
		" select * from ( ",
		" select b.choice ,  b.text,a.line, b.menu_type||b.line type ",
		" from menus a, menus b ",
		" where a.MENU = :MENU ",
		" and a.choice = b.menu ",
		" union ",
		" select choice, text,line, menu_type||line type ",
		" from menus ",
		" where menu = :MENU ",
		" order by a.line,type) ",
		" where choice in ",
		" (select ROUTINE_NAME from adm_authority a, ADM_USER_INFORMATION b ",
		" where AUTH_TYPE = 'G' and a.username = b.groupname and b.username = :USERNAME ",
		" union select ROUTINE_NAME from adm_authority where AUTH_TYPE = 'U' and username = :USERNAME ",
		" union select CHOICE from menus where menu = :MENU ",
		")"
	]
	,
	"GET_ROUTINES_AUTHORITY":[
		" select AUTH_TYPE, ROUTINE_NAME , AUTHLEVEL, DISP_FLAG , ROUT_VER, ROUTINE_DESC  from  ",
		" ( select a.AUTH_TYPE, a.ROUTINE_NAME, AUTHLEVEL, DISP_FLAG , c.ROUT_VER, c.ROUTINE_DESC ",
		"  from adm_authority a, ADM_USER_INFORMATION b , routines c ",
		"   where AUTH_TYPE = 'G' ",
		"    and b.username = :USERNAME " ,
		"    and a.username = b.groupname ",
		"    and a.ROUTINE_NAME = C.ROUTINE_NAME ",
		" union ",
		" select a.AUTH_TYPE, a.ROUTINE_NAME,AUTHLEVEL,DISP_FLAG ,c.ROUT_VER, c.ROUTINE_DESC ",
		"   from adm_authority a , routines c ",
		"     where AUTH_TYPE = 'U' and username = :USERNAME " ,
		"      and a.ROUTINE_NAME = c.ROUTINE_NAME ",
		" ) order by auth_type desc "
	],
	"GET_ALLOWED_MODULES":[
		" select CHOICE id,  TEXT text  ",
		"  from MENUS ",
		"   where MENU = :MENU ",
		"    and CHOICE in ( :CHOICES )  " 
	],
	"GET_ADM_QUERY_DEF":[
		" SELECT QUERY_ID ,  QUERY_NAME , QUERY_TYPE, MODULE,  SELECT_CLAUSE ,  FROM_CLAUSE ,  WHERE_CLAUSE ,  WHERE_MAND_CLAUSE ,  GROUP_ORDER_BY_CLAUSE",
		" FROM ADM_QUERY_DEF ",
		" WHERE QUERY_ID = :QUERY_ID "

	],
	"GET_ADM_QUERY_DEF_QUERY":[
		" SELECT QUERY_ID ,  QUERY_NAME , QUERY_TYPE, MODULE, SELECT_CLAUSE ,  FROM_CLAUSE ,  WHERE_CLAUSE ,  WHERE_MAND_CLAUSE ,  GROUP_ORDER_BY_CLAUSE",
		" FROM ADM_QUERY_DEF ",
		" :_WHERE "
	],
	"INSERT_ADM_QUERY_DEF":[
		" INSERT INTO ADM_QUERY_DEF ",
		" ( QUERY_ID  ,  QUERY_NAME  ,  QUERY_TYPE, MODULE, SELECT_CLAUSE  ,  FROM_CLAUSE  ,  WHERE_CLAUSE  ,  WHERE_MAND_CLAUSE  ,  GROUP_ORDER_BY_CLAUSE  ) ",
		" VALUES ",
		" ( (SELECT MAX(QUERY_ID)+1 from ADM_QUERY_DEF)  ,  :QUERY_NAME  , :QUERY_TYPE, :MODULE,  :SELECT_CLAUSE  ,  :FROM_CLAUSE  ,  :WHERE_CLAUSE  ,  :WHERE_MAND_CLAUSE  ,  :GROUP_ORDER_BY_CLAUSE  ) "

	],
	"UPDATE_ADM_QUERY_DEF":[
		" UPDATE  ADM_QUERY_DEF ",
		" SET   QUERY_ID = :QUERY_ID " , 
	  ",  QUERY_NAME = :QUERY_NAME " , 
	  ",  QUERY_TYPE = :QUERY_TYPE " , 
  	  ",  MODULE = :MODULE " , 
	  ",  SELECT_CLAUSE = :SELECT_CLAUSE " , 
	  ",  FROM_CLAUSE = :FROM_CLAUSE " , 
	  ",  WHERE_CLAUSE = :WHERE_CLAUSE " , 
	  ",  WHERE_MAND_CLAUSE = :WHERE_MAND_CLAUSE " , 
	  ",  GROUP_ORDER_BY_CLAUSE = :GROUP_ORDER_BY_CLAUSE ",
		" WHERE QUERY_ID = :QUERY_ID "

	],
	"DELETE_ADM_QUERY_DEF":[
		" DELETE FROM ADM_QUERY_DEF ",
		" WHERE QUERY_ID = :QUERY_ID "

	]
	 ,
	"GET_DSP_DYNAMIC_QUERY":[
		" SELECT QUERY_ID",
		" FROM DSP_DYNAMIC ",
		" :_WHERE "
	]
	,
	"GET_ADM_DASHBOARD_DEF":[
		" SELECT DASHBOARD_ID ,  DASHBOARD_NAME ,  MODULE ,  LOGNAME ,  LOGDATE ",
		" FROM ADM_DASHBOARD_DEF ",
		" WHERE DASHBOARD_ID = :DASHBOARD_ID"

	]
	,
	"GET_MAX_ADM_DASHBOARD_ID":[
		" SELECT MAX(DASHBOARD_ID)+1 DASHBOARD_ID  ",
		" FROM ADM_DASHBOARD_DEF "

	]

	,
	"GET_ADM_DASHBOARD_DEF_QUERY":[
		" SELECT DASHBOARD_ID ,  DASHBOARD_NAME ,  MODULE ,  LOGNAME ,  LOGDATE ",
		" FROM ADM_DASHBOARD_DEF ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_DASHBOARD_DEF":[
		" INSERT INTO ADM_DASHBOARD_DEF ",
		" ( DASHBOARD_ID  ,  DASHBOARD_NAME  ,  MODULE  ,  LOGNAME  ,  LOGDATE    ) ",
		" VALUES ",
		" ( :DASHBOARD_ID  ,  :DASHBOARD_NAME  ,  :MODULE  ,  :LOGNAME  ,  :LOGDATE    ) "

	]

	,
	"UPDATE_ADM_DASHBOARD_DEF":[
		" UPDATE  ADM_DASHBOARD_DEF ",
		" SET   DASHBOARD_ID = :DASHBOARD_ID " , 
	  ",  DASHBOARD_NAME = :DASHBOARD_NAME " , 
	  ",  MODULE = :MODULE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE " , 
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID "

	]

	,
	"DELETE_ADM_DASHBOARD_DEF":[
		" DELETE FROM ADM_DASHBOARD_DEF ",
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID "

	]
	,
	"GET_ADM_DASHBOARD_DETAIL":[
		" SELECT DASHBOARD_ID ,  CHART_ID ,  CHART_ORDER ,  QUERY_ID ,  CHART_TITLE ,  CHART_TYPE ,  CHART_WIDTH ,  CHART_HEIGHT ,  LOGNAME ,  LOGDATE",
		" FROM ADM_DASHBOARD_DETAIL ",
		" WHERE DASHBOARD_ID = :DASHBOARD_ID AND CHART_ID LIKE :CHART_ID  ORDER BY DASHBOARD_ID,CHART_ORDER "

	]

	,
	"GET_ADM_DASHBOARD_DETAIL_QUERY":[
		" SELECT DASHBOARD_ID ,  CHART_ID ,  CHART_ORDER ,  QUERY_ID ,  CHART_TITLE ,  CHART_TYPE ,  CHART_WIDTH ,  CHART_HEIGHT ,  LOGNAME ,  LOGDATE",
		" FROM ADM_DASHBOARD_DETAIL ",
		" :_WHERE ORDER BY DASHBOARD_ID,CHART_ORDER "
	]

	,
	"INSERT_ADM_DASHBOARD_DETAIL":[
		" INSERT INTO ADM_DASHBOARD_DETAIL ",
		" ( DASHBOARD_ID  ,  CHART_ID  ,  CHART_ORDER  ,  QUERY_ID  ,  CHART_TITLE  ,  CHART_TYPE  ,  CHART_WIDTH  ,  CHART_HEIGHT  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :DASHBOARD_ID  ,  :CHART_ID  ,  :CHART_ORDER  ,  :QUERY_ID  ,  :CHART_TITLE  ,  :CHART_TYPE  ,  :CHART_WIDTH  ,  :CHART_HEIGHT  ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_DASHBOARD_DETAIL":[
		" UPDATE  ADM_DASHBOARD_DETAIL ",
		" SET   DASHBOARD_ID = :DASHBOARD_ID " , 
	  ",  CHART_ID = :CHART_ID " , 
	  ",  CHART_ORDER = :CHART_ORDER " , 
	  ",  QUERY_ID = :QUERY_ID " , 
	  ",  CHART_TITLE = :CHART_TITLE " , 
	  ",  CHART_TYPE = :CHART_TYPE " , 
	  ",  CHART_WIDTH = :CHART_WIDTH " , 
	  ",  CHART_HEIGHT = :CHART_HEIGHT " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID  AND  CHART_ID = :CHART_ID "

	]

	,
	"DELETE_ADM_DASHBOARD_DETAIL":[
		" DELETE FROM ADM_DASHBOARD_DETAIL ",
		" WHERE  DASHBOARD_ID = :DASHBOARD_ID  AND  CHART_ID = :CHART_ID "

	]

	,
	"GET_ADM_RULE_DEF":[
		" SELECT MODULE ,  RULE_ID , RULE_TRIGGER, ROUTINE_NAME,  QUERY_DEF , RULE_KEY, RESPONSE_DATA_ID, RESPONSE_DATA_NAME,  DISABLED, RULE_DESCRIPTION,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_DEF ",
		" WHERE  MODULE = :MODULE ",
		" AND  RULE_ID = :RULE_ID "  
	]

	,
	"GET_ADM_RULE_DEF_QUERY":[
		" SELECT MODULE ,  RULE_ID , RULE_TRIGGER, ROUTINE_NAME,  QUERY_DEF , RULE_KEY, RESPONSE_DATA_ID, RESPONSE_DATA_NAME,  DISABLED,RULE_DESCRIPTION,   LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_DEF ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_DEF":[
		" INSERT INTO ADM_RULE_DEF ",
		" ( MODULE  ,  RULE_ID  , RULE_TRIGGER, ROUTINE_NAME,  QUERY_DEF  , RULE_KEY, RESPONSE_DATA_ID, RESPONSE_DATA_NAME,  DISABLED,  RULE_DESCRIPTION, LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :MODULE  ,  :RULE_ID  , :RULE_TRIGGER, :ROUTINE_NAME,   :QUERY_DEF  ,  :RULE_KEY, :RESPONSE_DATA_ID, :RESPONSE_DATA_NAME,  :DISABLED, :RULE_DESCRIPTION,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_DEF":[
		" UPDATE  ADM_RULE_DEF ",
		" SET   MODULE = :MODULE " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  RULE_TRIGGER = :RULE_TRIGGER " , 
	  ",  ROUTINE_NAME = :ROUTINE_NAME " , 
	  ",  QUERY_DEF = :QUERY_DEF " , 
	  ",  RULE_KEY = :RULE_KEY " , 
 	  ",  RESPONSE_DATA_ID = :RESPONSE_DATA_ID " , 
  	  ",  RESPONSE_DATA_NAME = :RESPONSE_DATA_NAME " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  RULE_DESCRIPTION = :RULE_DESCRIPTION " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  MODULE = :MODULE ",
		" AND  RULE_ID = :RULE_ID "  

	]

	,
	"DELETE_ADM_RULE_DEF":[
		" DELETE FROM ADM_RULE_DEF ",
		" WHERE  MODULE = :MODULE ",
		" AND  RULE_ID = :RULE_ID "  

	]

	,
	"GET_ADM_RULE_ITEM":[
		" SELECT MODULE ,  RULE_ID ,  ITEM ,  FIELD ,  OPERATION ,  FIELD_VALUE ,DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ITEM ",
		" WHERE MODULE = :MODULE AND RULE_ID = :RULE_ID AND ITEM = :ITEM"

	]

	,
	"GET_ADM_RULE_ITEM_QUERY":[
		" SELECT MODULE ,  RULE_ID ,  ITEM ,  FIELD ,  OPERATION ,  FIELD_VALUE , DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ITEM ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_ITEM":[
		" INSERT INTO ADM_RULE_ITEM ",
		" ( MODULE  ,  RULE_ID  ,  ITEM  ,  FIELD  ,  OPERATION  ,  FIELD_VALUE  ,  DISABLED, LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :MODULE  ,  :RULE_ID  ,  :ITEM  ,  :FIELD  ,  :OPERATION  ,  :FIELD_VALUE  , :DISABLED,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_ITEM":[
		" UPDATE  ADM_RULE_ITEM ",
		" SET   MODULE = :MODULE " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  ITEM = :ITEM " , 
	  ",  FIELD = :FIELD " , 
	  ",  OPERATION = :OPERATION " , 
	  ",  FIELD_VALUE = :FIELD_VALUE " , 
 	  ",  DISABLED = :DISABLED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ITEM = :ITEM "

	]

	,
	"DELETE_ADM_RULE_ITEM":[
		" DELETE FROM ADM_RULE_ITEM ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ITEM = :ITEM "

	]

	,
	"GET_ADM_RULE_ACTION":[
		" SELECT MODULE ,  RULE_ID ,  ACTION_ID ,  ACTION_ORDER ,  ACTION_CODE ,  SEND_TO , MAP_ID,  BODY_DATA , PARAMETER_DATA, EXTRA_DATA , DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ACTION ",
		" WHERE MODULE = :MODULE AND RULE_ID = :RULE_ID AND ACTION_ID = :ACTION_ID"

	]

	,
	"GET_ADM_RULE_ACTION_QUERY":[
		" SELECT MODULE ,  RULE_ID ,  ACTION_ID ,  ACTION_ORDER ,  ACTION_CODE ,  SEND_TO , MAP_ID, BODY_DATA , PARAMETER_DATA, EXTRA_DATA , DISABLED,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_ACTION ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_ACTION":[
		" INSERT INTO ADM_RULE_ACTION ",
		" ( MODULE  ,  RULE_ID  ,  ACTION_ID  ,  ACTION_ORDER  ,  ACTION_CODE  ,  SEND_TO  , MAP_ID,  BODY_DATA , PARAMETER_DATA ,  EXTRA_DATA  ,DISABLED,   LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :MODULE  ,  :RULE_ID  ,  :ACTION_ID  ,  :ACTION_ORDER  ,  :ACTION_CODE  ,  :SEND_TO  , :MAP_ID,  :BODY_DATA  , :PARAMETER_DATA,  :EXTRA_DATA  ,:DISABLED,   :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_ACTION":[
		" UPDATE  ADM_RULE_ACTION ",
		" SET   MODULE = :MODULE " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  ACTION_ID = :ACTION_ID " , 
	  ",  ACTION_ORDER = :ACTION_ORDER " , 
	  ",  ACTION_CODE = :ACTION_CODE " , 
	  ",  SEND_TO = :SEND_TO " , 
	  ",  MAP_ID = :MAP_ID " , 
	  ",  BODY_DATA = :BODY_DATA " , 
	  ",  PARAMETER_DATA = :PARAMETER_DATA " , 
	  ",  EXTRA_DATA = :EXTRA_DATA " , 
	  ",  DISABLED = :DISABLED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ACTION_ID = :ACTION_ID "

	]

	,
	"DELETE_ADM_RULE_ACTION":[
		" DELETE FROM ADM_RULE_ACTION ",
		" WHERE  MODULE = :MODULE  AND  RULE_ID = :RULE_ID  AND  ACTION_ID = :ACTION_ID "

	]

	,
	"GET_ADM_RULE_HOST":[
		" SELECT HOST_ID, URL, PROTOCOL, HOST ,  PATH ,  PORT ,  HTTP_METHOD ,  AUTHORIZATION , HEADER, CONTENT_TYPE, SUCCESS_MSG,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST ",
		" WHERE HOST_ID like :HOST_ID"

	]

	,
	"GET_ADM_RULE_HOST_QUERY":[
		" SELECT HOST_ID, URL, PROTOCOL, HOST ,  PATH ,  PORT ,  HTTP_METHOD ,  AUTHORIZATION , HEADER, CONTENT_TYPE, SUCCESS_MSG,   LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_HOST":[
		" INSERT INTO ADM_RULE_HOST ",
		" ( HOST_ID, URL, PROTOCOL, HOST  ,  PATH  ,  PORT  ,  HTTP_METHOD  ,  AUTHORIZATION , HEADER, CONTENT_TYPE, SUCCESS_MSG,   LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :HOST_ID, :URL, :PROTOCOL,  :HOST  ,  :PATH  ,  :PORT  ,  :HTTP_METHOD  ,  :AUTHORIZATION , :HEADER, :CONTENT_TYPE, :SUCCESS_MSG,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_HOST":[
		" UPDATE  ADM_RULE_HOST ",
		" SET   HOST = :HOST " , 
	  ",  URL = :URL " , 
	  ",  PROTOCOL = :PROTOCOL " , 
	  ",  PATH = :PATH " , 
	  ",  PORT = :PORT " , 
	  ",  HTTP_METHOD = :HTTP_METHOD " , 
	  ",  AUTHORIZATION = :AUTHORIZATION " , 
	  ",  CONTENT_TYPE = :CONTENT_TYPE " , 
  	  ",  HEADER = :HEADER " , 
	  ",  SUCCESS_MSG = :SUCCESS_MSG " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  HOST_ID = :HOST_ID "

	]

	,
	"DELETE_ADM_RULE_HOST":[
		" DELETE FROM ADM_RULE_HOST ",
		" WHERE  HOST_ID = :HOST_ID "

	]

	,
	"GET_ADM_RULE_HOST_MAP":[
		" SELECT HOST_ID ,  MAP_ID ,MAP_NAME ,  XSLT_SEND ,  XSLT_RECEIVE ,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST_MAP ",
		" WHERE HOST_ID LIKE :HOST_ID AND MAP_ID LIKE :MAP_ID"

	]

	,
	"GET_ADM_RULE_HOST_MAP_QUERY":[
		" SELECT HOST_ID ,  MAP_ID ,MAP_NAME,  XSLT_SEND ,  XSLT_RECEIVE ,  LOGNAME ,  LOGDATE",
		" FROM ADM_RULE_HOST_MAP ",
		" :_WHERE "
	]

	,
	"INSERT_ADM_RULE_HOST_MAP":[
		" INSERT INTO ADM_RULE_HOST_MAP ",
		" ( HOST_ID  ,  MAP_ID  , MAP_NAME,  XSLT_SEND  ,  XSLT_RECEIVE  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :HOST_ID  ,  :MAP_ID  , :MAP_NAME,  :XSLT_SEND  ,  :XSLT_RECEIVE  ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_ADM_RULE_HOST_MAP":[
		" UPDATE  ADM_RULE_HOST_MAP ",
		" SET   HOST_ID = :HOST_ID " , 
	  ",  MAP_ID = :MAP_ID " , 
	  ",  MAP_NAME = :MAP_NAME " , 
	  ",  XSLT_SEND = :XSLT_SEND " , 
	  ",  XSLT_RECEIVE = :XSLT_RECEIVE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  HOST_ID = :HOST_ID  AND  MAP_ID = :MAP_ID "

	]

	,
	"DELETE_ADM_RULE_HOST_MAP":[
		" DELETE FROM ADM_RULE_HOST_MAP ",
		" WHERE  HOST_ID = :HOST_ID  AND  MAP_ID = :MAP_ID "

	]

	,
	"GET_ADM_RULE_LOG":[
		" SELECT RULE_KEY ,  RULE_ID ,  ACTION_ID ,  STATUS ,  MSG_RESPONSE ,  MODULE ,  SENT_DATE ,  MSG_RECEIVED ,  PARAMETER_SENT ,  BODY_SENT ,  LOGDATE ,  LOGNAME",
		" FROM ADM_RULE_LOG ",
		" WHERE RULE_KEY = :RULE_KEY AND RULE_ID = :RULE_ID AND SENT_DATE = :SENT_DATE", 
		" ORDER BY SENT_DATE DESC"
	]

	,
	"GET_ADM_RULE_LOG_QUERY":[
		" SELECT RULE_KEY ,  RULE_ID ,  ACTION_ID ,  STATUS ,  MSG_RESPONSE ,  MODULE ,  SENT_DATE ,  MSG_RECEIVED ,  PARAMETER_SENT ,  BODY_SENT ,  LOGDATE ,  LOGNAME",
		" FROM ADM_RULE_LOG ",
		" :_WHERE ",
		" ORDER BY SENT_DATE DESC"
	]

	,
	"INSERT_ADM_RULE_LOG":[
		" INSERT INTO ADM_RULE_LOG ",
		" ( RULE_KEY  ,  RULE_ID  ,  ACTION_ID  ,  STATUS  ,  MSG_RESPONSE  ,  MODULE  ,  SENT_DATE  ,  MSG_RECEIVED  ,  PARAMETER_SENT  ,  BODY_SENT  ,  LOGDATE  ,  LOGNAME  ) ",
		" VALUES ",
		" ( :RULE_KEY  ,  :RULE_ID  ,  :ACTION_ID  ,  :STATUS  ,  :MSG_RESPONSE  ,  :MODULE  ,  :SENT_DATE  ,  :MSG_RECEIVED  ,  :PARAMETER_SENT  ,  :BODY_SENT  ,  :LOGDATE  ,  :LOGNAME  ) "

	]

	,
	"UPDATE_ADM_RULE_LOG":[
		" UPDATE  ADM_RULE_LOG ",
		" SET   RULE_KEY = :RULE_KEY " , 
	  ",  RULE_ID = :RULE_ID " , 
	  ",  ACTION_ID = :ACTION_ID " , 
	  ",  STATUS = :STATUS " , 
	  ",  MSG_RESPONSE = :MSG_RESPONSE " , 
	  ",  MODULE = :MODULE " , 
	  ",  SENT_DATE = :SENT_DATE " , 
	  ",  MSG_RECEIVED = :MSG_RECEIVED " , 
	  ",  PARAMETER_SENT = :PARAMETER_SENT " , 
	  ",  BODY_SENT = :BODY_SENT " , 
	  ",  LOGDATE = :LOGDATE " , 
	  ",  LOGNAME = :LOGNAME ",
		" WHERE  RULE_KEY = :RULE_KEY  AND  RULE_ID = :RULE_ID  AND  SENT_DATE = :SENT_DATE "

	]

	,
	"DELETE_ADM_RULE_LOG":[
		" DELETE FROM ADM_RULE_LOG ",
		" WHERE  RULE_KEY = :RULE_KEY  AND  RULE_ID = :RULE_ID  AND  SENT_DATE = :SENT_DATE "

	],
	"GET_DSP_TEMPLATE_QUERY":[
		" SELECT TEMPLATE_NAME ,TEMPLATE_OWNER,  ORDER_TYPE , DEPT, DIVS,ASSIGNEE_TYPE, ASSIGNEE,  PARENT_ORDER_TYPE , DESCRIPTION,  FORM_NAME, DAYS,  LOGDATE , LOGNAME ",
		" FROM DSP_TEMPLATE ",
		" :_WHERE ",
		" ORDER BY  TEMPLATE_NAME "
	],
	"GET_DSP_TEMPLATE_FIELDS":[
		" SELECT TEMPLATE_NAME ,  FIELD_ID ,  FIELD_ROW ,  FIELD_ORDER ,  FIELD_NAME ,  FIELD_TYPE ,  FIELD_LOOKUP ,  FIELD_DEFAULT, FIELD_REQUIRED ,  LOGNAME ,  LOGDATE",
		" FROM DSP_TEMPLATE_FIELDS ",
		" WHERE TEMPLATE_NAME = :TEMPLATE_NAME AND FIELD_ID like :FIELD_ID ",
		" ORDER BY FIELD_ROW, FIELD_ORDER "

	],
	"GET_DSP_TEMPLATE_FIELDS_BY_ORDER_NO":[
		" SELECT A.TEMPLATE_NAME ,  A.FIELD_ID ,  A.FIELD_ROW ,  A.FIELD_ORDER ,  A.FIELD_NAME ,  A.FIELD_TYPE ,  A.FIELD_LOOKUP ,  A.FIELD_DEFAULT, A.FIELD_REQUIRED ,  A.LOGNAME ,  A.LOGDATE",
		" FROM DSP_TEMPLATE_FIELDS A, DSP_ORDERS B",
		" WHERE ORDER_NO = :ORDER_NO ",
		"   AND A.TEMPLATE_NAME = B.TEMPLATE_NAME  ",
		" ORDER BY FIELD_ROW, FIELD_ORDER "
	]
	,
	"GET_DSP_TEMPLATE_FIELDS_QUERY":[
		" SELECT TEMPLATE_NAME ,  FIELD_ID ,  FIELD_ROW ,  FIELD_ORDER ,  FIELD_NAME ,  FIELD_TYPE ,  FIELD_LOOKUP ,  FIELD_DEFAULT, FIELD_REQUIRED ,  LOGNAME ,  LOGDATE",
		" FROM DSP_TEMPLATE_FIELDS ",
		" :_WHERE ",
		" ORDER BY FIELD_ROW, FIELD_ORDER "
	]

	,
	"INSERT_DSP_TEMPLATE_FIELDS":[
		" INSERT INTO DSP_TEMPLATE_FIELDS ",
		" ( TEMPLATE_NAME  ,  FIELD_ID  ,  FIELD_ROW  ,  FIELD_ORDER  ,  FIELD_NAME  ,  FIELD_TYPE  ,  FIELD_LOOKUP  ,  FIELD_DEFAULT, FIELD_REQUIRED  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :TEMPLATE_NAME  ,  :FIELD_ID  ,  :FIELD_ROW  ,  :FIELD_ORDER  ,  :FIELD_NAME  ,  :FIELD_TYPE  ,  :FIELD_LOOKUP  ,  :FIELD_DEFAULT , :FIELD_REQUIRED ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_TEMPLATE_FIELDS":[
		" UPDATE  DSP_TEMPLATE_FIELDS ",
		" SET   TEMPLATE_NAME = :TEMPLATE_NAME " , 
	  ",  FIELD_ID = :FIELD_ID " , 
	  ",  FIELD_ROW = :FIELD_ROW " , 
	  ",  FIELD_ORDER = :FIELD_ORDER " , 
	  ",  FIELD_NAME = :FIELD_NAME " , 
	  ",  FIELD_TYPE = :FIELD_TYPE " , 
	  ",  FIELD_LOOKUP = :FIELD_LOOKUP " , 
  	  ",  FIELD_REQUIRED = :FIELD_REQUIRED " , 
	  ",  FIELD_DEFAULT = :FIELD_DEFAULT " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME  AND  FIELD_ID = :FIELD_ID "

	]

	,
	"DELETE_DSP_TEMPLATE_FIELDS":[
		" DELETE FROM DSP_TEMPLATE_FIELDS ",
		" WHERE  TEMPLATE_NAME = :TEMPLATE_NAME  AND  FIELD_ID = :FIELD_ID "

	]
	,
	"INSERT_EKYC_LOG":[
		" INSERT INTO EKYC_LOG ",
		" ( ORDER_NO  ,  WO_ORDER_NO  ,  WO_STATUS  ,  SUBNO, LOGDATE  ,  LOGNAME  ) ",
		" VALUES ",
		" ( :ORDER_NO  ,  :WO_ORDER_NO  ,  :WO_STATUS ,  :SUBNO, :LOGDATE  ,  :LOGNAME  ) "

	],
	"GET_ADM_RULE_DEF_RULE_ITEM":[
		" Select A.MODULE, A.RULE_ID, A.QUERY_DEF , A.RULE_KEY ,A.RESPONSE_DATA_ID, A.RESPONSE_DATA_NAME, A.ROUTINE_NAME,  B.ITEM, B.FIELD, B.OPERATION, B.FIELD_VALUE " ,
		"    from ADM_RULE_DEF A, ADM_RULE_ITEM B" ,
		"    where A.MODULE = B.MODULE " ,
		"      AND A.RULE_ID = B.RULE_ID " ,
		"     AND ( A.DISABLED = 0 or A.DISABLED is  null)  " ,
		"     AND ( B.DISABLED = 0 or B.DISABLED is  null)  " ,
		"     AND A.RULE_TRIGGER = :RULE_TRIGGER " ,
		"    order by A.MODULE, A.RULE_ID, B.ITEM "
	],
	"GET_ADM_RULE_DEF_RULE_ACTION":[
		" Select A.MODULE, A.RULE_ID, A.QUERY_DEF , A.ROUTINE_NAME, B.ACTION_ID, B.ACTION_CODE, B.SEND_TO,B.MAP_ID, B.BODY_DATA, B.PARAMETER_DATA, B.EXTRA_DATA " ,
		" from ADM_RULE_DEF A, ADM_RULE_ACTION B " ,
		" where A.MODULE = B.MODULE " ,
		"  AND A.RULE_ID = B.RULE_ID " ,
		"     AND ( A.DISABLED = 0 or A.DISABLED is  null)  " ,
		"     AND ( B.DISABLED = 0 or B.DISABLED is  null)  " ,
		"     AND A.RULE_TRIGGER = :RULE_TRIGGER " ,
		" order by A.MODULE, A.RULE_ID, B.ACTION_ORDER "
	],
	"GET_TEMP_EKYC_FLAGS":[
		" Select FINGER, BIO, ID " ,
		" from TEMP_EKYC_FLAGS " ,
		" where WO_ORDER_NO = :WO_ORDER_NO " 
	],
	"CREATE_ORDER":[
	]
	,
	"GET_EPM_FLOW":[
		" SELECT FLOW_CODE ,  FLOW_DESCRIPTION ,  MASTER_FLOW_CODE ,  ENGINE_LEVEL ,  CDR_TYPE ,  COMMIT_FLOW ,  COMMIT_STEP ,  COMMIT_RECORDS ,  FLOW_COMMENT ,  FLOW_CATEGORY",
		" FROM EPM_FLOW ",
		" WHERE FLOW_CODE = :FLOW_CODE"

	]
	,
	"GET_EPM_FLOW_QUERY":[
		" SELECT FLOW_CODE ,  FLOW_DESCRIPTION ,  MASTER_FLOW_CODE ,  ENGINE_LEVEL ,  CDR_TYPE ,  COMMIT_FLOW ,  COMMIT_STEP ,  COMMIT_RECORDS ,  FLOW_COMMENT ,  FLOW_CATEGORY",
		" FROM EPM_FLOW ",
		" :_WHERE "
	]

	,
	"INSERT_EPM_FLOW":[
		" INSERT INTO EPM_FLOW ",
		" ( FLOW_CODE  ,  FLOW_DESCRIPTION  ,  MASTER_FLOW_CODE  ,  ENGINE_LEVEL  ,  CDR_TYPE  ,  COMMIT_FLOW  ,  COMMIT_STEP  ,  COMMIT_RECORDS  ,  FLOW_COMMENT  ,  FLOW_CATEGORY  ) ",
		" VALUES ",
		" ( :FLOW_CODE  ,  :FLOW_DESCRIPTION  ,  :MASTER_FLOW_CODE  ,  :ENGINE_LEVEL  ,  :CDR_TYPE  ,  :COMMIT_FLOW  ,  :COMMIT_STEP  ,  :COMMIT_RECORDS  ,  :FLOW_COMMENT  ,  :FLOW_CATEGORY  ) "

	]

	,
	"UPDATE_EPM_FLOW":[
		" UPDATE  EPM_FLOW ",
		" SET   FLOW_CODE = :FLOW_CODE " , 
	  ",  FLOW_DESCRIPTION = :FLOW_DESCRIPTION " , 
	  ",  MASTER_FLOW_CODE = :MASTER_FLOW_CODE " , 
	  ",  ENGINE_LEVEL = :ENGINE_LEVEL " , 
	  ",  CDR_TYPE = :CDR_TYPE " , 
	  ",  COMMIT_FLOW = :COMMIT_FLOW " , 
	  ",  COMMIT_STEP = :COMMIT_STEP " , 
	  ",  COMMIT_RECORDS = :COMMIT_RECORDS " , 
	  ",  FLOW_COMMENT = :FLOW_COMMENT " , 
	  ",  FLOW_CATEGORY = :FLOW_CATEGORY ",
		" WHERE  FLOW_CODE = :FLOW_CODE "

	]

	,
	"DELETE_EPM_FLOW":[
		" DELETE FROM EPM_FLOW ",
		" WHERE  FLOW_CODE = :FLOW_CODE "

	],
	"GET_DSP_FORM_PAGE":[
		" SELECT FORM_NAME ,  PAGE_NO ,  PAGE_ORDER ,  PAGE_TYPE ,  PAGE_TITLE ,  PAGE_ICON ,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_PAGE ",
		" WHERE FORM_NAME = :FORM_NAME AND PAGE_NO like :PAGE_NO",
		" ORDER BY  FORM_NAME, PAGE_NO   "

	]

	,
	"GET_DSP_FORM_PAGE_QUERY":[
		" SELECT FORM_NAME ,  PAGE_NO ,  PAGE_ORDER ,  PAGE_TYPE ,  PAGE_TITLE ,  PAGE_ICON ,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_PAGE ",
		" :_WHERE ",
		" ORDER BY  FORM_NAME, PAGE_NO   "
	]

	,
	"INSERT_DSP_FORM_PAGE":[
		" INSERT INTO DSP_FORM_PAGE ",
		" ( FORM_NAME  ,  PAGE_NO  ,  PAGE_ORDER  ,  PAGE_TYPE  ,  PAGE_TITLE  ,  PAGE_ICON  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :FORM_NAME  ,  :PAGE_NO  ,  :PAGE_ORDER  ,  :PAGE_TYPE  ,  :PAGE_TITLE  ,  :PAGE_ICON  ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_FORM_PAGE":[
		" UPDATE  DSP_FORM_PAGE ",
		" SET   FORM_NAME = :FORM_NAME " , 
	  ",  PAGE_NO = :PAGE_NO " , 
	  ",  PAGE_ORDER = :PAGE_ORDER " , 
	  ",  PAGE_TYPE = :PAGE_TYPE " , 
	  ",  PAGE_TITLE = :PAGE_TITLE " , 
	  ",  PAGE_ICON = :PAGE_ICON " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO "

	]

	,
	"DELETE_DSP_FORM_PAGE":[
		" DELETE FROM DSP_FORM_PAGE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO "

	],
	"GET_DSP_FORM_AREA":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  AREA_TYPE , AREA_TITLE , LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_AREA ",
		" WHERE FORM_NAME = :FORM_NAME AND PAGE_NO like :PAGE_NO AND AREA_NO like :AREA_NO",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO  "

	]

	,
	"GET_DSP_FORM_AREA_QUERY":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  AREA_TYPE , AREA_TITLE,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_AREA ",
		" :_WHERE ",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO  "
	]

	,
	"INSERT_DSP_FORM_AREA":[
		" INSERT INTO DSP_FORM_AREA ",
		" ( FORM_NAME  ,  PAGE_NO  ,  AREA_NO  ,  AREA_TYPE  , AREA_TITLE,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :FORM_NAME  ,  :PAGE_NO  ,  :AREA_NO  ,  :AREA_TYPE  , :AREA_TITLE,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_FORM_AREA":[
		" UPDATE  DSP_FORM_AREA ",
		" SET   FORM_NAME = :FORM_NAME " , 
	  ",  PAGE_NO = :PAGE_NO " , 
	  ",  AREA_NO = :AREA_NO " , 
	  ",  AREA_TYPE = :AREA_TYPE " , 
	  ",  AREA_TITLE = :AREA_TITLE " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO "

	]

	,
	"DELETE_DSP_FORM_AREA":[
		" DELETE FROM DSP_FORM_AREA ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO "

	],
	"GET_DSP_FORM_FIELDS":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  FIELD_ID ,  FIELD_ROW ,  FIELD_ORDER ,  FIELD_NAME ,  FIELD_TYPE ,  FIELD_LOOKUP ,  FIELD_DEFAULT ,  FIELD_REQUIRED ,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_FIELDS ",
		" WHERE FORM_NAME = :FORM_NAME AND PAGE_NO LIKE :PAGE_NO AND AREA_NO LIKE :AREA_NO AND FIELD_ID LIKE :FIELD_ID ",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO ,  FIELD_ID "

	]

	,
	"GET_DSP_FORM_FIELDS_QUERY":[
		" SELECT FORM_NAME ,  PAGE_NO ,  AREA_NO ,  FIELD_ID ,  FIELD_ROW ,  FIELD_ORDER ,  FIELD_NAME ,  FIELD_TYPE ,  FIELD_LOOKUP ,  FIELD_DEFAULT ,  FIELD_REQUIRED ,  LOGNAME ,  LOGDATE",
		" FROM DSP_FORM_FIELDS ",
		" :_WHERE ",
		" ORDER BY  FORM_NAME, PAGE_NO ,  AREA_NO ,  FIELD_ID "
	]

	,
	"INSERT_DSP_FORM_FIELDS":[
		" INSERT INTO DSP_FORM_FIELDS ",
		" ( FORM_NAME  ,  PAGE_NO  ,  AREA_NO  ,  FIELD_ID  ,  FIELD_ROW  ,  FIELD_ORDER  ,  FIELD_NAME  ,  FIELD_TYPE  ,  FIELD_LOOKUP  ,  FIELD_DEFAULT  ,  FIELD_REQUIRED  ,  LOGNAME  ,  LOGDATE  ) ",
		" VALUES ",
		" ( :FORM_NAME  ,  :PAGE_NO  ,  :AREA_NO  ,  :FIELD_ID  ,  :FIELD_ROW  ,  :FIELD_ORDER  ,  :FIELD_NAME  ,  :FIELD_TYPE  ,  :FIELD_LOOKUP  ,  :FIELD_DEFAULT  ,  :FIELD_REQUIRED  ,  :LOGNAME  ,  :LOGDATE  ) "

	]

	,
	"UPDATE_DSP_FORM_FIELDS":[
		" UPDATE  DSP_FORM_FIELDS ",
		" SET   FORM_NAME = :FORM_NAME " , 
	  ",  PAGE_NO = :PAGE_NO " , 
	  ",  AREA_NO = :AREA_NO " , 
	  ",  FIELD_ID = :FIELD_ID " , 
	  ",  FIELD_ROW = :FIELD_ROW " , 
	  ",  FIELD_ORDER = :FIELD_ORDER " , 
	  ",  FIELD_NAME = :FIELD_NAME " , 
	  ",  FIELD_TYPE = :FIELD_TYPE " , 
	  ",  FIELD_LOOKUP = :FIELD_LOOKUP " , 
	  ",  FIELD_DEFAULT = :FIELD_DEFAULT " , 
	  ",  FIELD_REQUIRED = :FIELD_REQUIRED " , 
	  ",  LOGNAME = :LOGNAME " , 
	  ",  LOGDATE = :LOGDATE ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO  AND  FIELD_ID = :FIELD_ID "

	]

	,
	"DELETE_DSP_FORM_FIELDS":[
		" DELETE FROM DSP_FORM_FIELDS ",
		" WHERE  FORM_NAME = :FORM_NAME  AND  PAGE_NO = :PAGE_NO  AND  AREA_NO = :AREA_NO  AND  FIELD_ID = :FIELD_ID "

	]





}

