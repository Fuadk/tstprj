import { HttpClient } from '@angular/common/http';
import { GridDataResult } from '@progress/kendo-angular-grid';
import { Observable } from 'rxjs';
import { NotificationService } from '@progress/kendo-angular-notification';
import { DialogService } from '@progress/kendo-angular-dialog';
import { PanelBarStateChangeEvent } from '@progress/kendo-angular-layout';
import { MessageService } from '@progress/kendo-angular-l10n';
import * as i0 from "@angular/core";
export declare class starServices {
    private notificationService;
    private dialogService;
    private http;
    private messages;
    paramConfig: any;
    private createdItems;
    private updatedItems;
    private deletedItems;
    loading: any;
    routine_name: string;
    saveChangesMsg: string;
    deleteDetailMsg: string;
    pleaseConfirmMsg: string;
    deleteConfirmMsg: string;
    nothingToDeletelMsg: string;
    fieldsRequiredMsg: string;
    readOnlyMsg: string;
    noAccessMsg: string;
    standardErrorMsg: string;
    saveMasterMsg: string;
    USERNAME: string;
    hideAfter: number;
    StrAuth: string;
    USER_INFO: any;
    MASTER_DB: string;
    private httpOptions;
    limit: number;
    YesNoActions: {
        text: string;
        primary: boolean;
    }[];
    OkActions: {
        text: string;
        primary: boolean;
    }[];
    sessionParams: any;
    EPMENG_URL: string;
    SERVER_URL: string;
    BASE_URL: string;
    eKycScr: string;
    portalScr: string;
    constructor(notificationService: NotificationService, dialogService: DialogService, http: HttpClient, messages: MessageService);
    removeRec(gridData: any, editedRowIndex: number): any;
    updateRec(gridData: any, editedRowIndex: number, NewVal: any): any;
    addRec(gridData: any, NewVal: any): any;
    formatWhere(NewVal: any): string;
    checkDBLoc(theURL: any): any;
    fetch(object: any, queryName: string): Observable<GridDataResult>;
    delete(Page: string): Observable<GridDataResult>;
    post_delete(Page: string, Body: any): Observable<GridDataResult>;
    syncFlag: number;
    post(object: any, Page: string, Body: any): Observable<GridDataResult>;
    postUpload(Page: string, Body: any): Observable<GridDataResult>;
    uploadFile(page: any, filesSet: Set<File>, id: any): any;
    uploadFileOld(file: File): any;
    hasChanges(): boolean;
    private addToBody;
    showNotification(styleNote: any, msg: any): void;
    goRecordAct(target: any, object: any): void;
    goRecord(target: any, object: any): void;
    showConfirmation(dialogStruc: any): void;
    /**************** Form functions **************/
    executeQuery_form(form: any, object: any): void;
    parseToDate(json: any): any;
    dateYYYYMMDD(object: any, json: any): any;
    executeQueryAct_form(form: any, object: any): void;
    execstarServices_form_inTrans(NewVal: any, object: any): void;
    execstarServices_form(NewVal: any, object: any): void;
    saveChanges_form(form: any, object: any): void;
    enterQueryAct_form(form: any, object: any): void;
    setPrimarKeyNameArr(object: any, value: any): void;
    enterQuery_form(form: any, object: any): void;
    onCancel_form(e: any, object: any): void;
    showOkMsg(object: any, msg: any, severity: any): void;
    onRemove_form(form: any, object: any): void;
    Remove_formAct(form: any, object: any): void;
    onNew_form(e: any, object: any): void;
    /******************* Grid functions  ********/
    addHandler_grid(object: any): void;
    removeHandler_grid(sender: any, object: any): void;
    saveCurrent_grid(object: any): void;
    closeEditor_grid(object: any): void;
    cancelHandler_grid(object: any): void;
    saveChanges_grid_inTrans(grid: any, object: any, NewVal: any): void;
    saveChanges_grid(grid: any, object: any): void;
    getErrorMsg(err: any): string;
    executeQuery_grid(grid: any, object: any): void;
    executeQueryAct_grid(grid: any, object: any): void;
    enterQueryAct_grid(grid: any, object: any): void;
    enterQuery_grid(grid: any, object: any): void;
    setStrAuth(user: any, password: any): void;
    login(object: any, user: any, password: any): void;
    rulesPostQueryDef: {
        rulePtrsArr: any[];
        rulesArr: any[];
        actionPtrsArr: any[];
        actionsArr: any[];
    };
    rulesPreQueryDef: {
        rulePtrsArr: any[];
        rulesArr: any[];
        actionPtrsArr: any[];
        actionsArr: any[];
    };
    hostsArr: any[];
    hostsMapArr: any[];
    FORMAT_ISO(d: any): any;
    LogRule(object: any, ruleLog: any, msgResponse: any, status: any): void;
    performHttpPost(object: any, bodyToSend: any, parametersToSend: any, sendTo: any, queryData: any, rule: any, action: any, Trigger: any, hostDef: any, hostMapDef: any, headerParam: any): {
        status: number;
        msg: string;
    };
    sendToServer(object: any, actionsArr: any, queryData: any, rule: any, action: any, Trigger: any, hostsArr: any, hostsMapArr: any): any;
    performAction(object: any, qry: any, ptr: any, queryData: any, rule: any, rulesDef: any, Trigger: any, hostsArr: any, hostsMapArr: any): {
        status: number;
        msg: any;
    };
    checkRulesByTrigger(object: any, rulesDef: any, queryData: any, Trigger: any, routine_name: any, hostsArr: any, hostsMapArr: any): {
        status: number;
        msg: string;
    };
    checkRules(object: any, rulesDef: any, actualResult: any, Trigger: any): any;
    storeActionsPtrs(actions: any, rulesDef: any): void;
    storeRulesPtrs(rules: any, rulesDef: any): void;
    loadRules(object: any): void;
    fetchLookups(object: any, lookupArrDef: any): void;
    performPost(object: any, fn: any): void;
    setComponentConfig(componentConfig: any, screenConfig: any): any;
    getRoutineAuth(menu: any, routine_name: any): any;
    actOnParamConfig(object: any, routine_name: any): void;
    showErrorMsg(object: any, serverError: any): void;
    sendGetCommand(url: any, page: string): Observable<GridDataResult>;
    postCommandOptions(Options: any, page: string, url: any, Body: any): Observable<GridDataResult>;
    postCommand(page: string, url: any, Body: any): Observable<GridDataResult>;
    CapitalizeFirst(str: any): any;
    CapitalizeTitle(fieldName: any): any;
    prepareLookup(fieldName: any, paramConfig: any): any;
    getAssigneeSelect(object: any, assigneeType: any): any;
    getFirstWeekDay(object: any, value: any): Date;
    setRTL(): void;
    loadLanguageOld(language_name: any): void;
    loadLanguage(language: any): void;
    getNLS(params: any, id: any, text: any): any;
    loadStatements(statements: any): void;
    handleFetchedModules(object: any, data: any): void;
    fetchMenu(object: any, handleFetchedData: any): void;
    setModuleItems(object: any): void;
    stateChange(object: any, data: PanelBarStateChangeEvent): boolean;
    setPanelBar(object: any): void;
    handleFetchedPanelBar(object: any, data: any): void;
    sleep(ms: any): Promise<unknown>;
    private commitBody;
    inTrans: boolean;
    private Body;
    commitCommands: string[];
    beginTrans(): void;
    endTrans(object: any, commit: any): Promise<unknown>;
    execSQLBody(object: any, Body: any, DBLoc: any): any;
    execSQL(object: any, sqlStmt: any): any;
    att_img_getFileLink(field_data: any, object: any): string;
    att_img_getAtt(data: any, object: any): string;
    att_img_populateArrs(formGroup: any, object: any): void;
    att_img_form_openUploadimage(field_id: any, object: any): void;
    callGetSaveAttachemts(action: any, data: any, object: any): void;
    att_img_saveFormCompletedHandler(value: any, object: any): Promise<void>;
    att_img_saveGridCompletedHandler(value: any, object: any): void;
    att_img_grid_openUploadimage(field_id: any, object: any): Promise<void>;
    addNewCode(object: any, CODENAME: any): void;
    handleFilterCode(object: any, CODE: any): void;
    hideNoValidLicense(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<starServices, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<starServices>;
}
